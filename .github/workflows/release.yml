name: Release

on:
  push:
    tags:
      - 'v*'

env:
  GO_VERSION: '1.21'
  DOCKER_REGISTRY: ghcr.io

jobs:
  # Создание релиза
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Извлекаем версию из тега
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # Генерируем changelog
          echo "## What's Changed" > CHANGELOG.md
          echo "" >> CHANGELOG.md

          # Получаем коммиты с последнего релиза
          git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> CHANGELOG.md

          echo "" >> CHANGELOG.md
          echo "## Installation" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### Docker" >> CHANGELOG.md
          echo "```bash" >> CHANGELOG.md
          echo "docker pull ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/auth:$VERSION" >> CHANGELOG.md
          echo "docker pull ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/gateway:$VERSION" >> CHANGELOG.md
          echo "docker pull ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/vpn-core:$VERSION" >> CHANGELOG.md
          echo "docker pull ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/dpi-bypass:$VERSION" >> CHANGELOG.md
          echo "docker pull ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/server-manager:$VERSION" >> CHANGELOG.md
          echo "docker pull ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/analytics:$VERSION" >> CHANGELOG.md
          echo "docker pull ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/notifications:$VERSION" >> CHANGELOG.md
          echo "```" >> CHANGELOG.md

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.changelog.outputs.version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false

  # Сборка и публикация Docker образов с тегом версии
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [create-release]
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/auth
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/gateway
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/vpn-core
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/dpi-bypass
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/server-manager
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/analytics
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/notifications
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push auth image
        uses: docker/build-push-action@v5
        with:
          context: ./api/auth
          file: ./api/auth/Dockerfile
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/auth:${{ github.ref_name }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push gateway image
        uses: docker/build-push-action@v5
        with:
          context: ./api/gateway
          file: ./api/gateway/Dockerfile
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/gateway:${{ github.ref_name }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push vpn-core image
        uses: docker/build-push-action@v5
        with:
          context: ./rpc/vpn-core
          file: ./rpc/vpn-core/Dockerfile
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/vpn-core:${{ github.ref_name }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push dpi-bypass image
        uses: docker/build-push-action@v5
        with:
          context: ./rpc/dpi-bypass
          file: ./rpc/dpi-bypass/Dockerfile
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/dpi-bypass:${{ github.ref_name }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push server-manager image
        uses: docker/build-push-action@v5
        with:
          context: ./rpc/server-manager
          file: ./rpc/server-manager/Dockerfile
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/server-manager:${{ github.ref_name }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push analytics image
        uses: docker/build-push-action@v5
        with:
          context: ./rpc/analytics
          file: ./rpc/analytics/Dockerfile
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/analytics:${{ github.ref_name }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push notifications image
        uses: docker/build-push-action@v5
        with:
          context: ./rpc/notifications
          file: ./rpc/notifications/Dockerfile
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/notifications:${{ github.ref_name }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Создание бинарных файлов для релиза
  build-binaries:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: [create-release]
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64
          - os: darwin
            arch: amd64
          - os: darwin
            arch: arm64
          - os: windows
            arch: amd64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install dependencies
        run: go work sync

      - name: Generate protobuf
        run: |
          cd rpc/vpn-core
          chmod +x ./scripts/generate.sh
          ./scripts/generate.sh

      - name: Build binaries
        run: |
          VERSION=${GITHUB_REF#refs/tags/}

          # Auth
          cd api/auth
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -ldflags="-s -w -X main.version=$VERSION" -o ../../bin/auth-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.os == 'windows' && '.exe' || '' }} ./cmd

          # Gateway
          cd ../gateway
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -ldflags="-s -w -X main.version=$VERSION" -o ../../bin/gateway-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.os == 'windows' && '.exe' || '' }} ./cmd

          # VPN Core
          cd ../../rpc/vpn-core
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -ldflags="-s -w -X main.version=$VERSION" -o ../../bin/vpn-core-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.os == 'windows' && '.exe' || '' }} ./cmd

          # DPI Bypass
          cd ../dpi-bypass
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -ldflags="-s -w -X main.version=$VERSION" -o ../../bin/dpi-bypass-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.os == 'windows' && '.exe' || '' }} ./cmd

          # Server Manager
          cd ../server-manager
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -ldflags="-s -w -X main.version=$VERSION" -o ../../bin/server-manager-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.os == 'windows' && '.exe' || '' }} ./cmd

          # Analytics
          cd ../analytics
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -ldflags="-s -w -X main.version=$VERSION" -o ../../bin/analytics-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.os == 'windows' && '.exe' || '' }} ./cmd

          # Notifications
          cd ../notifications
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -ldflags="-s -w -X main.version=$VERSION" -o ../../bin/notifications-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.os == 'windows' && '.exe' || '' }} ./cmd

      - name: Upload binaries to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./bin/
          asset_name: silence-${{ github.ref_name }}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz
          asset_content_type: application/gzip

  # Уведомления
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [create-release, build-and-push, build-binaries]
    if: always()
    steps:
      - name: Notify Slack
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          channel: '#releases'
          text: 'Release ${{ github.ref }} failed!'

      - name: Notify success
        if: success()
        run: |
          echo "Release ${{ github.ref }} created successfully!"
          echo "Docker images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}"
          echo "Release URL: ${{ needs.create-release.outputs.upload_url }}"
