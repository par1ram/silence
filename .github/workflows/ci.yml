name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  GO_VERSION: '1.21'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_TAG: ${{ github.sha }}

jobs:
  # Линтинг и проверка кода
  lint:
    name: Lint and Check Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest

      - name: Run linter
        run: |
          cd api/auth && golangci-lint run
          cd ../../rpc/vpn-core && golangci-lint run
          cd ../../rpc/dpi-bypass && golangci-lint run
          cd ../../rpc/server-manager && golangci-lint run
          cd ../../rpc/analytics && golangci-lint run
          cd ../../rpc/notifications && golangci-lint run

  # Тестирование
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: silence_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      influxdb:
        image: influxdb:2.7-alpine
        env:
          DOCKER_INFLUXDB_INIT_MODE: setup
          DOCKER_INFLUXDB_INIT_USERNAME: admin
          DOCKER_INFLUXDB_INIT_PASSWORD: admin123
          DOCKER_INFLUXDB_INIT_ORG: silence
          DOCKER_INFLUXDB_INIT_BUCKET: metrics
        options: >-
          --health-cmd "influx ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 8086:8086

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install dependencies
        run: go work sync

      - name: Run unit tests
        run: |
          go test ./api/auth/... -v
          go test ./api/gateway/... -v
          go test ./rpc/vpn-core/... -v
          go test ./rpc/dpi-bypass/... -v
          go test ./rpc/server-manager/... -v
          go test ./rpc/analytics/... -v
          go test ./rpc/notifications/... -v

      - name: Run integration tests
        run: |
          # Запуск интеграционных тестов с реальными сервисами
          cd tests && go test -v -tags=integration

  # Сборка
  build:
    name: Build Services
    runs-on: ubuntu-latest
    needs: [lint, test]
    strategy:
      matrix:
        service:
          - auth
          - gateway
          - vpn-core
          - dpi-bypass
          - server-manager
          - analytics
          - notifications

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install dependencies
        run: go work sync

      - name: Generate protobuf (for vpn-core)
        if: matrix.service == 'vpn-core'
        run: |
          cd rpc/vpn-core
          chmod +x ./scripts/generate.sh
          ./scripts/generate.sh

      - name: Build service
        run: |
          if [ "${{ matrix.service }}" = "auth" ] || [ "${{ matrix.service }}" = "gateway" ]; then
            cd api/${{ matrix.service }}
          else
            cd rpc/${{ matrix.service }}
          fi
          go build -o bin/${{ matrix.service }} ./cmd

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-binary
          path: |
            api/${{ matrix.service }}/bin/${{ matrix.service }}
            rpc/${{ matrix.service }}/bin/${{ matrix.service }}
          retention-days: 7

  # Сборка Docker образов
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Build and push auth image
        uses: docker/build-push-action@v5
        with:
          context: ./api/auth
          file: ./api/auth/Dockerfile
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/auth:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push gateway image
        uses: docker/build-push-action@v5
        with:
          context: ./api/gateway
          file: ./api/gateway/Dockerfile
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/gateway:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push vpn-core image
        uses: docker/build-push-action@v5
        with:
          context: ./rpc/vpn-core
          file: ./rpc/vpn-core/Dockerfile
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/vpn-core:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push dpi-bypass image
        uses: docker/build-push-action@v5
        with:
          context: ./rpc/dpi-bypass
          file: ./rpc/dpi-bypass/Dockerfile
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/dpi-bypass:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push server-manager image
        uses: docker/build-push-action@v5
        with:
          context: ./rpc/server-manager
          file: ./rpc/server-manager/Dockerfile
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/server-manager:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push analytics image
        uses: docker/build-push-action@v5
        with:
          context: ./rpc/analytics
          file: ./rpc/analytics/Dockerfile
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/analytics:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push notifications image
        uses: docker/build-push-action@v5
        with:
          context: ./rpc/notifications
          file: ./rpc/notifications/Dockerfile
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/notifications:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Деплой в staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Здесь будет логика деплоя в staging
          # Например, kubectl apply или helm upgrade

  # Деплой в production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Здесь будет логика деплоя в production
          # Например, kubectl apply или helm upgrade
