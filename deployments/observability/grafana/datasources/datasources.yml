apiVersion: 1

datasources:
  - name: Prometheus
    type: prometheus
    access: proxy
    url: http://prometheus:9090
    isDefault: true
    editable: true
    jsonData:
      httpMethod: POST
      manageAlerts: true
      prometheusType: Prometheus
      prometheusVersion: 2.40.0
      cacheLevel: 'High'
      disableRecordingRules: false
      incrementalQueryOverlapWindow: 10m
      exemplarTraceIdDestinations:
        - name: traceID
          datasourceUid: tempo
          url: http://tempo:3200/trace/${__value.raw}
    secureJsonData: {}

  - name: Loki
    type: loki
    access: proxy
    url: http://loki:3100
    editable: true
    jsonData:
      maxLines: 1000
      derivedFields:
        - datasourceUid: tempo
          matcherRegex: "trace_id=(\\w+)"
          name: TraceID
          url: "$${__value.raw}"
        - datasourceUid: tempo
          matcherRegex: "traceID=(\\w+)"
          name: TraceID
          url: "$${__value.raw}"
    secureJsonData: {}

  - name: Tempo
    type: tempo
    access: proxy
    url: http://tempo:3200
    uid: tempo
    editable: true
    jsonData:
      httpMethod: GET
      serviceMap:
        datasourceUid: prometheus
      nodeGraph:
        enabled: true
      search:
        hide: false
      lokiSearch:
        datasourceUid: loki
      traceQuery:
        timeShiftEnabled: true
        spanStartTimeShift: 1h
        spanEndTimeShift: 1h
      spanBar:
        type: Tag
        tag: http.method
    secureJsonData: {}

  - name: Jaeger
    type: jaeger
    access: proxy
    url: http://jaeger:16686
    editable: true
    jsonData:
      httpMethod: GET
      tracesToLogs:
        datasourceUid: loki
        tags: ['job', 'instance', 'pod', 'namespace']
        mappedTags: [
          {
            key: 'service.name',
            value: 'service'
          }
        ]
        mapTagNamesEnabled: true
        spanStartTimeShift: 1h
        spanEndTimeShift: 1h
        filterByTraceID: true
        filterBySpanID: true
        lokiSearch: true
      tracesToMetrics:
        datasourceUid: prometheus
        tags: [
          {
            key: 'service.name',
            value: 'service'
          },
          {
            key: 'job'
          }
        ]
        queries: [
          {
            name: 'Sample query',
            query: 'sum(rate(traces_spanmetrics_latency_bucket{$__tags}[5m]))'
          }
        ]
        spanStartTimeShift: 1h
        spanEndTimeShift: 1h
    secureJsonData: {}

  - name: InfluxDB
    type: influxdb
    access: proxy
    url: http://host.docker.internal:8086
    editable: true
    jsonData:
      version: Flux
      organization: silence
      defaultBucket: analytics
      tlsSkipVerify: true
    secureJsonData:
      token: your-influxdb-token

  - name: Redis
    type: redis-datasource
    access: proxy
    url: redis://redis:6379
    editable: true
    jsonData:
      client: standalone
      poolSize: 5
      timeout: 10
      pingInterval: 0
      pipelineWindow: 0
    secureJsonData: {}

deleteDatasources:
  - name: TestData DB
    orgId: 1
