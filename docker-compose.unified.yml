services:
  # =============================================================================
  # INFRASTRUCTURE SERVICES
  # =============================================================================

  postgres:
    image: postgres:15-alpine
    container_name: silence_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-silence_auth}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployments/docker/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - silence_network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: silence_redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - silence_network
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: silence_rabbitmq
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-admin}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - silence_network
    restart: unless-stopped

  influxdb:
    image: influxdb:2.7-alpine
    container_name: silence_influxdb
    environment:
      DOCKER_INFLUXDB_INIT_MODE: ${DOCKER_INFLUXDB_INIT_MODE:-setup}
      DOCKER_INFLUXDB_INIT_USERNAME: ${DOCKER_INFLUXDB_INIT_USERNAME:-admin}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${DOCKER_INFLUXDB_INIT_PASSWORD:-adminpassword}
      DOCKER_INFLUXDB_INIT_ORG: ${DOCKER_INFLUXDB_INIT_ORG:-silence}
      DOCKER_INFLUXDB_INIT_BUCKET: ${DOCKER_INFLUXDB_INIT_BUCKET:-analytics}
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${DOCKER_INFLUXDB_INIT_ADMIN_TOKEN:-your-influxdb-token}
    ports:
      - "${INFLUXDB_PORT:-8086}:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
    healthcheck:
      test: ["CMD", "influx", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - silence_network
    restart: unless-stopped

  clickhouse:
    image: clickhouse/clickhouse-server:24.1-alpine
    container_name: silence_clickhouse
    environment:
      CLICKHOUSE_DB: ${CLICKHOUSE_DB:-silence_analytics}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-admin}
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: ${CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT:-1}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-password}
    ports:
      - "${CLICKHOUSE_HTTP_PORT:-8123}:8123"
      - "${CLICKHOUSE_NATIVE_PORT:-9000}:9000"
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./deployments/docker/clickhouse/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "clickhouse-client", "--query", "SELECT 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    platform: linux/amd64
    networks:
      - silence_network
    restart: unless-stopped

  # =============================================================================
  # DEVELOPMENT TOOLS
  # =============================================================================

  mailhog:
    image: mailhog/mailhog:latest
    container_name: silence_mailhog
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web UI
    networks:
      - silence_network
    restart: unless-stopped

  # =============================================================================
  # APPLICATION SERVICES
  # =============================================================================

  auth:
    build:
      context: .
      dockerfile: api/auth/Dockerfile
    container_name: silence_auth
    ports:
      - "${AUTH_HTTP_PORT:-8081}:8080"
      - "${AUTH_GRPC_PORT:-9081}:9080"
    environment:
      HTTP_PORT: 8080
      GRPC_PORT: 9080
      DB_HOST: postgres
      DB_PORT: ${DB_PORT:-5432}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-password}
      DB_NAME: ${AUTH_DB_NAME:-silence_auth}
      DB_SSLMODE: ${DB_SSLMODE:-disable}
      REDIS_HOST: redis
      REDIS_PORT: ${REDIS_PORT:-6379}
      JWT_SECRET: ${JWT_SECRET:-development-jwt-secret-key-change-this-in-production}
      JWT_ISSUER: ${JWT_ISSUER:-silence-vpn}
      JWT_AUDIENCE: ${JWT_AUDIENCE:-silence-users}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-24h}
      JWT_REFRESH_EXPIRATION: ${JWT_REFRESH_EXPIRATION:-168h}
      BCRYPT_COST: ${BCRYPT_COST:-12}
      INTERNAL_API_TOKEN: ${INTERNAL_API_TOKEN:-super-secret-internal-token}
      RATE_LIMIT_ENABLED: ${RATE_LIMIT_ENABLED:-true}
      RATE_LIMIT_REQUESTS: ${RATE_LIMIT_REQUESTS:-100}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-1m}
      MIGRATIONS_DIR: ${AUTH_MIGRATIONS_DIR:-/app/migrations}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FORMAT: ${LOG_FORMAT:-json}
      VERSION: ${SERVICE_VERSION:-1.0.0}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - silence_network
    restart: unless-stopped

  gateway:
    build:
      context: .
      dockerfile: api/gateway/Dockerfile
    container_name: silence_gateway
    ports:
      - "${GATEWAY_HTTP_PORT:-8080}:8080"
    environment:
      HTTP_PORT: 8080
      AUTH_SERVICE_URL: http://auth:8080
      AUTH_GRPC_SERVICE_URL: auth:9080
      ANALYTICS_SERVICE_URL: http://analytics:8080
      ANALYTICS_GRPC_SERVICE_URL: analytics:9080
      SERVER_MANAGER_SERVICE_URL: http://server-manager:8080
      SERVER_MANAGER_GRPC_SERVICE_URL: server-manager:9080
      DPI_BYPASS_SERVICE_URL: http://dpi-bypass:8080
      DPI_BYPASS_GRPC_SERVICE_URL: dpi-bypass:9080
      VPN_CORE_SERVICE_URL: http://vpn-core:8080
      VPN_CORE_GRPC_SERVICE_URL: vpn-core:9080
      NOTIFICATIONS_SERVICE_URL: http://notifications:8080
      NOTIFICATIONS_GRPC_SERVICE_URL: notifications:9080
      JWT_SECRET: ${JWT_SECRET:-development-jwt-secret-key-change-this-in-production}
      JWT_ISSUER: ${JWT_ISSUER:-silence-vpn}
      JWT_AUDIENCE: ${JWT_AUDIENCE:-silence-users}
      INTERNAL_API_TOKEN: ${INTERNAL_API_TOKEN:-super-secret-internal-token}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:8080}
      CORS_ALLOWED_METHODS: ${CORS_ALLOWED_METHODS:-GET,POST,PUT,DELETE,OPTIONS}
      CORS_ALLOWED_HEADERS: ${CORS_ALLOWED_HEADERS:-Content-Type,Authorization,X-Requested-With}
      CORS_ALLOW_CREDENTIALS: ${CORS_ALLOW_CREDENTIALS:-true}
      RATE_LIMIT_ENABLED: ${RATE_LIMIT_ENABLED:-true}
      RATE_LIMIT_REQUESTS: ${RATE_LIMIT_REQUESTS:-100}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-1m}
      HTTP_READ_TIMEOUT: ${HTTP_READ_TIMEOUT:-30s}
      HTTP_WRITE_TIMEOUT: ${HTTP_WRITE_TIMEOUT:-30s}
      HTTP_IDLE_TIMEOUT: ${HTTP_IDLE_TIMEOUT:-60s}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FORMAT: ${LOG_FORMAT:-json}
      VERSION: ${SERVICE_VERSION:-1.0.0}
    depends_on:
      auth:
        condition: service_started
      analytics:
        condition: service_started
      server-manager:
        condition: service_started
      dpi-bypass:
        condition: service_started
      vpn-core:
        condition: service_started
    networks:
      - silence_network
    restart: unless-stopped

  analytics:
    build:
      context: .
      dockerfile: rpc/analytics/Dockerfile
    container_name: silence_analytics
    ports:
      - "${ANALYTICS_HTTP_PORT:-8082}:8080"
      - "${ANALYTICS_GRPC_PORT:-9082}:9080"
    environment:
      HTTP_PORT: 8080
      GRPC_PORT: 9080
      INFLUXDB_URL: http://influxdb:8086
      INFLUXDB_TOKEN: ${INFLUXDB_TOKEN:-your-influxdb-token}
      INFLUXDB_ORG: ${INFLUXDB_ORG:-silence}
      INFLUXDB_BUCKET: ${INFLUXDB_BUCKET:-analytics}
      CLICKHOUSE_HOST: clickhouse
      CLICKHOUSE_HTTP_PORT: ${CLICKHOUSE_HTTP_PORT:-8123}
      CLICKHOUSE_NATIVE_PORT: ${CLICKHOUSE_NATIVE_PORT:-9000}
      CLICKHOUSE_DB: ${CLICKHOUSE_DB:-silence_analytics}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-admin}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-password}
      DB_HOST: postgres
      DB_PORT: ${DB_PORT:-5432}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-password}
      DB_NAME: ${ANALYTICS_DB_NAME:-silence_analytics}
      DB_SSLMODE: ${DB_SSLMODE:-disable}
      REDIS_HOST: redis
      REDIS_PORT: ${REDIS_PORT:-6379}
      INTERNAL_API_TOKEN: ${INTERNAL_API_TOKEN:-super-secret-internal-token}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FORMAT: ${LOG_FORMAT:-json}
      VERSION: ${SERVICE_VERSION:-1.0.0}
    depends_on:
      influxdb:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - silence_network
    restart: unless-stopped

  server-manager:
    build:
      context: .
      dockerfile: rpc/server-manager/Dockerfile
    container_name: silence_server_manager
    ports:
      - "${SERVER_MANAGER_HTTP_PORT:-8085}:8080"
      - "${SERVER_MANAGER_GRPC_PORT:-9085}:9080"
    environment:
      HTTP_PORT: 8080
      GRPC_PORT: 9080
      DB_HOST: postgres
      DB_PORT: ${DB_PORT:-5432}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-password}
      DB_NAME: ${SERVER_MANAGER_DB_NAME:-silence_server_manager}
      DB_SSLMODE: ${DB_SSLMODE:-disable}
      REDIS_HOST: redis
      REDIS_PORT: ${REDIS_PORT:-6379}
      DOCKER_HOST: ${DOCKER_HOST:-unix:///var/run/docker.sock}
      DOCKER_API_VERSION: ${DOCKER_API_VERSION:-1.41}
      DOCKER_TIMEOUT: ${DOCKER_TIMEOUT:-30s}
      INTERNAL_API_TOKEN: ${INTERNAL_API_TOKEN:-super-secret-internal-token}
      MIGRATIONS_DIR: ${SERVER_MANAGER_MIGRATIONS_DIR:-/app/migrations}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FORMAT: ${LOG_FORMAT:-json}
      VERSION: ${SERVICE_VERSION:-1.0.0}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - silence_network
    restart: unless-stopped

  dpi-bypass:
    build:
      context: .
      dockerfile: rpc/dpi-bypass/Dockerfile
    container_name: silence_dpi_bypass
    ports:
      - "${DPI_BYPASS_HTTP_PORT:-8083}:8080"
      - "${DPI_BYPASS_GRPC_PORT:-9083}:9080"
    environment:
      HTTP_PORT: 8080
      GRPC_PORT: 9080
      REDIS_HOST: redis
      REDIS_PORT: ${REDIS_PORT:-6379}
      INTERNAL_API_TOKEN: ${INTERNAL_API_TOKEN:-super-secret-internal-token}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FORMAT: ${LOG_FORMAT:-json}
      VERSION: ${SERVICE_VERSION:-1.0.0}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - silence_network
    restart: unless-stopped

  vpn-core:
    build:
      context: .
      dockerfile: rpc/vpn-core/Dockerfile
    container_name: silence_vpn_core
    ports:
      - "${VPN_CORE_HTTP_PORT:-8084}:8080"
      - "${VPN_CORE_GRPC_PORT:-9084}:9080"
    environment:
      HTTP_PORT: 8080
      GRPC_PORT: 9080
      DB_HOST: postgres
      DB_PORT: ${DB_PORT:-5432}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-password}
      DB_NAME: ${VPN_CORE_DB_NAME:-silence_vpn}
      DB_SSLMODE: ${DB_SSLMODE:-disable}
      REDIS_HOST: redis
      REDIS_PORT: ${REDIS_PORT:-6379}
      WIREGUARD_DIR: ${WIREGUARD_DIR:-/etc/wireguard}
      WIREGUARD_INTERFACE: ${WIREGUARD_INTERFACE:-wg0}
      WIREGUARD_LISTEN_PORT: ${WIREGUARD_LISTEN_PORT:-51820}
      WIREGUARD_MTU: ${WIREGUARD_MTU:-1420}
      INTERNAL_API_TOKEN: ${INTERNAL_API_TOKEN:-super-secret-internal-token}
      MIGRATIONS_DIR: ${VPN_CORE_MIGRATIONS_DIR:-/app/migrations}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FORMAT: ${LOG_FORMAT:-json}
      VERSION: ${SERVICE_VERSION:-1.0.0}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - silence_network
    restart: unless-stopped

  notifications:
    build:
      context: .
      dockerfile: rpc/notifications/Dockerfile
    container_name: silence_notifications
    ports:
      - "${NOTIFICATIONS_HTTP_PORT:-8087}:8080"
      - "${NOTIFICATIONS_GRPC_PORT:-9087}:9080"
    environment:
      HTTP_PORT: 8080
      GRPC_PORT: 9080
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: ${RABBITMQ_PORT:-5672}
      RABBITMQ_USER: ${RABBITMQ_USER:-admin}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-admin}
      RABBITMQ_VHOST: /
      RABBITMQ_URL: amqp://admin:admin@rabbitmq:5672/
      RABBITMQ_EXCHANGE: ${RABBITMQ_EXCHANGE:-notifications}
      RABBITMQ_QUEUE: ${RABBITMQ_QUEUE:-notifications_queue}
      RABBITMQ_ROUTING_KEY: ${RABBITMQ_ROUTING_KEY:-notifications.*}
      RABBITMQ_CONSUMER_TAG: ${RABBITMQ_CONSUMER_TAG:-notifications_consumer}
      RABBITMQ_PREFETCH_COUNT: ${RABBITMQ_PREFETCH_COUNT:-10}
      DB_HOST: postgres
      DB_PORT: ${DB_PORT:-5432}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-password}
      DB_NAME: ${NOTIFICATIONS_DB_NAME:-silence_notifications}
      DB_SSLMODE: ${DB_SSLMODE:-disable}
      REDIS_HOST: redis
      REDIS_PORT: ${REDIS_PORT:-6379}
      ANALYTICS_SERVICE_URL: http://analytics:8080
      ANALYTICS_GRPC_SERVICE_URL: analytics:9080
      SMTP_HOST: ${SMTP_HOST:-mailhog}
      SMTP_PORT: ${SMTP_PORT:-1025}
      SMTP_FROM: ${SMTP_FROM:-dev@silence-vpn.com}
      SMTP_FROM_NAME: ${SMTP_FROM_NAME:-Silence VPN}
      SLACK_WEBHOOK_URL: ${SLACK_WEBHOOK_URL:-}
      DISCORD_WEBHOOK_URL: ${DISCORD_WEBHOOK_URL:-}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN:-}
      TELEGRAM_CHAT_ID: ${TELEGRAM_CHAT_ID:-}
      INTERNAL_API_TOKEN: ${INTERNAL_API_TOKEN:-super-secret-internal-token}
      MIGRATIONS_DIR: ${NOTIFICATIONS_MIGRATIONS_DIR:-/app/migrations}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FORMAT: ${LOG_FORMAT:-json}
      VERSION: ${SERVICE_VERSION:-1.0.0}
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      analytics:
        condition: service_started
    networks:
      - silence_network
    restart: unless-stopped

  # =============================================================================
  # MONITORING SERVICES (Optional)
  # =============================================================================

  prometheus:
    image: prom/prometheus:latest
    container_name: silence_prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./deployments/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - silence_network
    restart: unless-stopped
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: silence_grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployments/monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    networks:
      - silence_network
    restart: unless-stopped
    profiles:
      - monitoring

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: silence_jaeger
    ports:
      - "${JAEGER_UI_PORT:-16686}:16686"  # UI
      - "${JAEGER_COLLECTOR_PORT:-14268}:14268"  # HTTP collector
    environment:
      COLLECTOR_OTLP_ENABLED: true
    networks:
      - silence_network
    restart: unless-stopped
    profiles:
      - monitoring

# =============================================================================
# VOLUMES
# =============================================================================

volumes:
  postgres_data:
    name: silence_postgres_data
  redis_data:
    name: silence_redis_data
  rabbitmq_data:
    name: silence_rabbitmq_data
  influxdb_data:
    name: silence_influxdb_data
  clickhouse_data:
    name: silence_clickhouse_data
  prometheus_data:
    name: silence_prometheus_data
  grafana_data:
    name: silence_grafana_data

# =============================================================================
# NETWORKS
# =============================================================================

networks:
  silence_network:
    name: silence_network
    driver: bridge
    ipam:
      config:
        - subnet: 172.18.0.0/16
