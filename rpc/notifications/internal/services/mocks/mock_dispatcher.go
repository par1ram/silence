// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/par1ram/silence/rpc/notifications/internal/services (interfaces: DeliveryAdapter)

// Package services_test is a generated GoMock package.
package services_test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/par1ram/silence/rpc/notifications/internal/domain"
)

// MockDeliveryAdapter is a mock of DeliveryAdapter interface.
type MockDeliveryAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockDeliveryAdapterMockRecorder
}

// MockDeliveryAdapterMockRecorder is the mock recorder for MockDeliveryAdapter.
type MockDeliveryAdapterMockRecorder struct {
	mock *MockDeliveryAdapter
}

// NewMockDeliveryAdapter creates a new mock instance.
func NewMockDeliveryAdapter(ctrl *gomock.Controller) *MockDeliveryAdapter {
	mock := &MockDeliveryAdapter{ctrl: ctrl}
	mock.recorder = &MockDeliveryAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeliveryAdapter) EXPECT() *MockDeliveryAdapterMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockDeliveryAdapter) Send(arg0 context.Context, arg1 *domain.Notification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockDeliveryAdapterMockRecorder) Send(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockDeliveryAdapter)(nil).Send), arg0, arg1)
}
