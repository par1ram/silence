// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/par1ram/silence/rpc/analytics/internal/ports (interfaces: MetricsRepository,DashboardRepository,MetricsCollector,AlertService)

// Package services_test is a generated GoMock package.
package services_test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/par1ram/silence/rpc/analytics/internal/domain"
)

// MockMetricsRepository is a mock of MetricsRepository interface.
type MockMetricsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsRepositoryMockRecorder
}

// MockMetricsRepositoryMockRecorder is the mock recorder for MockMetricsRepository.
type MockMetricsRepositoryMockRecorder struct {
	mock *MockMetricsRepository
}

// NewMockMetricsRepository creates a new mock instance.
func NewMockMetricsRepository(ctrl *gomock.Controller) *MockMetricsRepository {
	mock := &MockMetricsRepository{ctrl: ctrl}
	mock.recorder = &MockMetricsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsRepository) EXPECT() *MockMetricsRepositoryMockRecorder {
	return m.recorder
}

// GetBypassEffectivenessMetrics mocks base method.
func (m *MockMetricsRepository) GetBypassEffectivenessMetrics(arg0 context.Context, arg1 domain.QueryOptions) (*domain.MetricResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBypassEffectivenessMetrics", arg0, arg1)
	ret0, _ := ret[0].(*domain.MetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBypassEffectivenessMetrics indicates an expected call of GetBypassEffectivenessMetrics.
func (mr *MockMetricsRepositoryMockRecorder) GetBypassEffectivenessMetrics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBypassEffectivenessMetrics", reflect.TypeOf((*MockMetricsRepository)(nil).GetBypassEffectivenessMetrics), arg0, arg1)
}

// GetBypassEffectivenessStats mocks base method.
func (m *MockMetricsRepository) GetBypassEffectivenessStats(arg0 context.Context, arg1 domain.QueryOptions) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBypassEffectivenessStats", arg0, arg1)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBypassEffectivenessStats indicates an expected call of GetBypassEffectivenessStats.
func (mr *MockMetricsRepositoryMockRecorder) GetBypassEffectivenessStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBypassEffectivenessStats", reflect.TypeOf((*MockMetricsRepository)(nil).GetBypassEffectivenessStats), arg0, arg1)
}

// GetConnectionMetrics mocks base method.
func (m *MockMetricsRepository) GetConnectionMetrics(arg0 context.Context, arg1 domain.QueryOptions) (*domain.MetricResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectionMetrics", arg0, arg1)
	ret0, _ := ret[0].(*domain.MetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectionMetrics indicates an expected call of GetConnectionMetrics.
func (mr *MockMetricsRepositoryMockRecorder) GetConnectionMetrics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionMetrics", reflect.TypeOf((*MockMetricsRepository)(nil).GetConnectionMetrics), arg0, arg1)
}

// GetConnectionStats mocks base method.
func (m *MockMetricsRepository) GetConnectionStats(arg0 context.Context, arg1 domain.QueryOptions) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectionStats", arg0, arg1)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectionStats indicates an expected call of GetConnectionStats.
func (mr *MockMetricsRepositoryMockRecorder) GetConnectionStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionStats", reflect.TypeOf((*MockMetricsRepository)(nil).GetConnectionStats), arg0, arg1)
}

// GetErrorMetrics mocks base method.
func (m *MockMetricsRepository) GetErrorMetrics(arg0 context.Context, arg1 domain.QueryOptions) (*domain.MetricResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetErrorMetrics", arg0, arg1)
	ret0, _ := ret[0].(*domain.MetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetErrorMetrics indicates an expected call of GetErrorMetrics.
func (mr *MockMetricsRepositoryMockRecorder) GetErrorMetrics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrorMetrics", reflect.TypeOf((*MockMetricsRepository)(nil).GetErrorMetrics), arg0, arg1)
}

// GetErrorStats mocks base method.
func (m *MockMetricsRepository) GetErrorStats(arg0 context.Context, arg1 domain.QueryOptions) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetErrorStats", arg0, arg1)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetErrorStats indicates an expected call of GetErrorStats.
func (mr *MockMetricsRepositoryMockRecorder) GetErrorStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrorStats", reflect.TypeOf((*MockMetricsRepository)(nil).GetErrorStats), arg0, arg1)
}

// GetServerLoadMetrics mocks base method.
func (m *MockMetricsRepository) GetServerLoadMetrics(arg0 context.Context, arg1 domain.QueryOptions) (*domain.MetricResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerLoadMetrics", arg0, arg1)
	ret0, _ := ret[0].(*domain.MetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerLoadMetrics indicates an expected call of GetServerLoadMetrics.
func (mr *MockMetricsRepositoryMockRecorder) GetServerLoadMetrics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerLoadMetrics", reflect.TypeOf((*MockMetricsRepository)(nil).GetServerLoadMetrics), arg0, arg1)
}

// GetServerLoadStats mocks base method.
func (m *MockMetricsRepository) GetServerLoadStats(arg0 context.Context, arg1 domain.QueryOptions) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerLoadStats", arg0, arg1)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerLoadStats indicates an expected call of GetServerLoadStats.
func (mr *MockMetricsRepositoryMockRecorder) GetServerLoadStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerLoadStats", reflect.TypeOf((*MockMetricsRepository)(nil).GetServerLoadStats), arg0, arg1)
}

// GetTimeSeries mocks base method.
func (m *MockMetricsRepository) GetTimeSeries(arg0 context.Context, arg1 string, arg2 domain.QueryOptions) ([]domain.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeSeries", arg0, arg1, arg2)
	ret0, _ := ret[0].([]domain.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeSeries indicates an expected call of GetTimeSeries.
func (mr *MockMetricsRepositoryMockRecorder) GetTimeSeries(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeSeries", reflect.TypeOf((*MockMetricsRepository)(nil).GetTimeSeries), arg0, arg1, arg2)
}

// GetUserActivityMetrics mocks base method.
func (m *MockMetricsRepository) GetUserActivityMetrics(arg0 context.Context, arg1 domain.QueryOptions) (*domain.MetricResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserActivityMetrics", arg0, arg1)
	ret0, _ := ret[0].(*domain.MetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserActivityMetrics indicates an expected call of GetUserActivityMetrics.
func (mr *MockMetricsRepositoryMockRecorder) GetUserActivityMetrics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserActivityMetrics", reflect.TypeOf((*MockMetricsRepository)(nil).GetUserActivityMetrics), arg0, arg1)
}

// GetUserActivityStats mocks base method.
func (m *MockMetricsRepository) GetUserActivityStats(arg0 context.Context, arg1 domain.QueryOptions) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserActivityStats", arg0, arg1)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserActivityStats indicates an expected call of GetUserActivityStats.
func (mr *MockMetricsRepositoryMockRecorder) GetUserActivityStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserActivityStats", reflect.TypeOf((*MockMetricsRepository)(nil).GetUserActivityStats), arg0, arg1)
}

// SaveBypassEffectivenessMetric mocks base method.
func (m *MockMetricsRepository) SaveBypassEffectivenessMetric(arg0 context.Context, arg1 domain.BypassEffectivenessMetric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBypassEffectivenessMetric", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBypassEffectivenessMetric indicates an expected call of SaveBypassEffectivenessMetric.
func (mr *MockMetricsRepositoryMockRecorder) SaveBypassEffectivenessMetric(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBypassEffectivenessMetric", reflect.TypeOf((*MockMetricsRepository)(nil).SaveBypassEffectivenessMetric), arg0, arg1)
}

// SaveConnectionMetric mocks base method.
func (m *MockMetricsRepository) SaveConnectionMetric(arg0 context.Context, arg1 domain.ConnectionMetric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveConnectionMetric", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveConnectionMetric indicates an expected call of SaveConnectionMetric.
func (mr *MockMetricsRepositoryMockRecorder) SaveConnectionMetric(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveConnectionMetric", reflect.TypeOf((*MockMetricsRepository)(nil).SaveConnectionMetric), arg0, arg1)
}

// SaveErrorMetric mocks base method.
func (m *MockMetricsRepository) SaveErrorMetric(arg0 context.Context, arg1 domain.ErrorMetric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveErrorMetric", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveErrorMetric indicates an expected call of SaveErrorMetric.
func (mr *MockMetricsRepositoryMockRecorder) SaveErrorMetric(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveErrorMetric", reflect.TypeOf((*MockMetricsRepository)(nil).SaveErrorMetric), arg0, arg1)
}

// SaveServerLoadMetric mocks base method.
func (m *MockMetricsRepository) SaveServerLoadMetric(arg0 context.Context, arg1 domain.ServerLoadMetric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveServerLoadMetric", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveServerLoadMetric indicates an expected call of SaveServerLoadMetric.
func (mr *MockMetricsRepositoryMockRecorder) SaveServerLoadMetric(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveServerLoadMetric", reflect.TypeOf((*MockMetricsRepository)(nil).SaveServerLoadMetric), arg0, arg1)
}

// SaveUserActivityMetric mocks base method.
func (m *MockMetricsRepository) SaveUserActivityMetric(arg0 context.Context, arg1 domain.UserActivityMetric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUserActivityMetric", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUserActivityMetric indicates an expected call of SaveUserActivityMetric.
func (mr *MockMetricsRepositoryMockRecorder) SaveUserActivityMetric(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUserActivityMetric", reflect.TypeOf((*MockMetricsRepository)(nil).SaveUserActivityMetric), arg0, arg1)
}

// MockDashboardRepository is a mock of DashboardRepository interface.
type MockDashboardRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDashboardRepositoryMockRecorder
}

// MockDashboardRepositoryMockRecorder is the mock recorder for MockDashboardRepository.
type MockDashboardRepositoryMockRecorder struct {
	mock *MockDashboardRepository
}

// NewMockDashboardRepository creates a new mock instance.
func NewMockDashboardRepository(ctrl *gomock.Controller) *MockDashboardRepository {
	mock := &MockDashboardRepository{ctrl: ctrl}
	mock.recorder = &MockDashboardRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDashboardRepository) EXPECT() *MockDashboardRepositoryMockRecorder {
	return m.recorder
}

// CreateDashboard mocks base method.
func (m *MockDashboardRepository) CreateDashboard(arg0 context.Context, arg1 domain.DashboardConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDashboard", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDashboard indicates an expected call of CreateDashboard.
func (mr *MockDashboardRepositoryMockRecorder) CreateDashboard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDashboard", reflect.TypeOf((*MockDashboardRepository)(nil).CreateDashboard), arg0, arg1)
}

// DeleteDashboard mocks base method.
func (m *MockDashboardRepository) DeleteDashboard(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDashboard", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDashboard indicates an expected call of DeleteDashboard.
func (mr *MockDashboardRepositoryMockRecorder) DeleteDashboard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDashboard", reflect.TypeOf((*MockDashboardRepository)(nil).DeleteDashboard), arg0, arg1)
}

// GetDashboard mocks base method.
func (m *MockDashboardRepository) GetDashboard(arg0 context.Context, arg1 string) (*domain.DashboardConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDashboard", arg0, arg1)
	ret0, _ := ret[0].(*domain.DashboardConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDashboard indicates an expected call of GetDashboard.
func (mr *MockDashboardRepositoryMockRecorder) GetDashboard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDashboard", reflect.TypeOf((*MockDashboardRepository)(nil).GetDashboard), arg0, arg1)
}

// ListDashboards mocks base method.
func (m *MockDashboardRepository) ListDashboards(arg0 context.Context) ([]domain.DashboardConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDashboards", arg0)
	ret0, _ := ret[0].([]domain.DashboardConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDashboards indicates an expected call of ListDashboards.
func (mr *MockDashboardRepositoryMockRecorder) ListDashboards(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDashboards", reflect.TypeOf((*MockDashboardRepository)(nil).ListDashboards), arg0)
}

// UpdateDashboard mocks base method.
func (m *MockDashboardRepository) UpdateDashboard(arg0 context.Context, arg1 domain.DashboardConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDashboard", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDashboard indicates an expected call of UpdateDashboard.
func (mr *MockDashboardRepositoryMockRecorder) UpdateDashboard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDashboard", reflect.TypeOf((*MockDashboardRepository)(nil).UpdateDashboard), arg0, arg1)
}

// MockMetricsCollector is a mock of MetricsCollector interface.
type MockMetricsCollector struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsCollectorMockRecorder
}

// MockMetricsCollectorMockRecorder is the mock recorder for MockMetricsCollector.
type MockMetricsCollectorMockRecorder struct {
	mock *MockMetricsCollector
}

// NewMockMetricsCollector creates a new mock instance.
func NewMockMetricsCollector(ctrl *gomock.Controller) *MockMetricsCollector {
	mock := &MockMetricsCollector{ctrl: ctrl}
	mock.recorder = &MockMetricsCollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsCollector) EXPECT() *MockMetricsCollectorMockRecorder {
	return m.recorder
}

// CollectBypassEffectivenessMetrics mocks base method.
func (m *MockMetricsCollector) CollectBypassEffectivenessMetrics(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectBypassEffectivenessMetrics", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CollectBypassEffectivenessMetrics indicates an expected call of CollectBypassEffectivenessMetrics.
func (mr *MockMetricsCollectorMockRecorder) CollectBypassEffectivenessMetrics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectBypassEffectivenessMetrics", reflect.TypeOf((*MockMetricsCollector)(nil).CollectBypassEffectivenessMetrics), arg0)
}

// CollectConnectionMetrics mocks base method.
func (m *MockMetricsCollector) CollectConnectionMetrics(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectConnectionMetrics", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CollectConnectionMetrics indicates an expected call of CollectConnectionMetrics.
func (mr *MockMetricsCollectorMockRecorder) CollectConnectionMetrics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectConnectionMetrics", reflect.TypeOf((*MockMetricsCollector)(nil).CollectConnectionMetrics), arg0)
}

// CollectErrorMetrics mocks base method.
func (m *MockMetricsCollector) CollectErrorMetrics(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectErrorMetrics", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CollectErrorMetrics indicates an expected call of CollectErrorMetrics.
func (mr *MockMetricsCollectorMockRecorder) CollectErrorMetrics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectErrorMetrics", reflect.TypeOf((*MockMetricsCollector)(nil).CollectErrorMetrics), arg0)
}

// CollectServerLoadMetrics mocks base method.
func (m *MockMetricsCollector) CollectServerLoadMetrics(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectServerLoadMetrics", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CollectServerLoadMetrics indicates an expected call of CollectServerLoadMetrics.
func (mr *MockMetricsCollectorMockRecorder) CollectServerLoadMetrics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectServerLoadMetrics", reflect.TypeOf((*MockMetricsCollector)(nil).CollectServerLoadMetrics), arg0)
}

// CollectUserActivityMetrics mocks base method.
func (m *MockMetricsCollector) CollectUserActivityMetrics(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectUserActivityMetrics", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CollectUserActivityMetrics indicates an expected call of CollectUserActivityMetrics.
func (mr *MockMetricsCollectorMockRecorder) CollectUserActivityMetrics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectUserActivityMetrics", reflect.TypeOf((*MockMetricsCollector)(nil).CollectUserActivityMetrics), arg0)
}

// StartPeriodicCollection mocks base method.
func (m *MockMetricsCollector) StartPeriodicCollection(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartPeriodicCollection", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartPeriodicCollection indicates an expected call of StartPeriodicCollection.
func (mr *MockMetricsCollectorMockRecorder) StartPeriodicCollection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartPeriodicCollection", reflect.TypeOf((*MockMetricsCollector)(nil).StartPeriodicCollection), arg0)
}

// StopPeriodicCollection mocks base method.
func (m *MockMetricsCollector) StopPeriodicCollection(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopPeriodicCollection", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopPeriodicCollection indicates an expected call of StopPeriodicCollection.
func (mr *MockMetricsCollectorMockRecorder) StopPeriodicCollection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopPeriodicCollection", reflect.TypeOf((*MockMetricsCollector)(nil).StopPeriodicCollection), arg0)
}

// MockAlertService is a mock of AlertService interface.
type MockAlertService struct {
	ctrl     *gomock.Controller
	recorder *MockAlertServiceMockRecorder
}

// MockAlertServiceMockRecorder is the mock recorder for MockAlertService.
type MockAlertServiceMockRecorder struct {
	mock *MockAlertService
}

// NewMockAlertService creates a new mock instance.
func NewMockAlertService(ctrl *gomock.Controller) *MockAlertService {
	mock := &MockAlertService{ctrl: ctrl}
	mock.recorder = &MockAlertServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlertService) EXPECT() *MockAlertServiceMockRecorder {
	return m.recorder
}

// AcknowledgeAlert mocks base method.
func (m *MockAlertService) AcknowledgeAlert(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcknowledgeAlert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcknowledgeAlert indicates an expected call of AcknowledgeAlert.
func (mr *MockAlertServiceMockRecorder) AcknowledgeAlert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcknowledgeAlert", reflect.TypeOf((*MockAlertService)(nil).AcknowledgeAlert), arg0, arg1)
}

// CreateAlertRule mocks base method.
func (m *MockAlertService) CreateAlertRule(arg0 context.Context, arg1 domain.AlertRule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAlertRule", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAlertRule indicates an expected call of CreateAlertRule.
func (mr *MockAlertServiceMockRecorder) CreateAlertRule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAlertRule", reflect.TypeOf((*MockAlertService)(nil).CreateAlertRule), arg0, arg1)
}

// DeleteAlertRule mocks base method.
func (m *MockAlertService) DeleteAlertRule(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAlertRule", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAlertRule indicates an expected call of DeleteAlertRule.
func (mr *MockAlertServiceMockRecorder) DeleteAlertRule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlertRule", reflect.TypeOf((*MockAlertService)(nil).DeleteAlertRule), arg0, arg1)
}

// EvaluateAlerts mocks base method.
func (m *MockAlertService) EvaluateAlerts(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvaluateAlerts", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EvaluateAlerts indicates an expected call of EvaluateAlerts.
func (mr *MockAlertServiceMockRecorder) EvaluateAlerts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvaluateAlerts", reflect.TypeOf((*MockAlertService)(nil).EvaluateAlerts), arg0)
}

// GetAlertHistory mocks base method.
func (m *MockAlertService) GetAlertHistory(arg0 context.Context, arg1 string, arg2 int) ([]domain.Alert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlertHistory", arg0, arg1, arg2)
	ret0, _ := ret[0].([]domain.Alert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlertHistory indicates an expected call of GetAlertHistory.
func (mr *MockAlertServiceMockRecorder) GetAlertHistory(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlertHistory", reflect.TypeOf((*MockAlertService)(nil).GetAlertHistory), arg0, arg1, arg2)
}

// GetAlertRule mocks base method.
func (m *MockAlertService) GetAlertRule(arg0 context.Context, arg1 string) (*domain.AlertRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlertRule", arg0, arg1)
	ret0, _ := ret[0].(*domain.AlertRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlertRule indicates an expected call of GetAlertRule.
func (mr *MockAlertServiceMockRecorder) GetAlertRule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlertRule", reflect.TypeOf((*MockAlertService)(nil).GetAlertRule), arg0, arg1)
}

// ListAlertRules mocks base method.
func (m *MockAlertService) ListAlertRules(arg0 context.Context) ([]domain.AlertRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAlertRules", arg0)
	ret0, _ := ret[0].([]domain.AlertRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAlertRules indicates an expected call of ListAlertRules.
func (mr *MockAlertServiceMockRecorder) ListAlertRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAlertRules", reflect.TypeOf((*MockAlertService)(nil).ListAlertRules), arg0)
}

// ResolveAlert mocks base method.
func (m *MockAlertService) ResolveAlert(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveAlert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResolveAlert indicates an expected call of ResolveAlert.
func (mr *MockAlertServiceMockRecorder) ResolveAlert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveAlert", reflect.TypeOf((*MockAlertService)(nil).ResolveAlert), arg0, arg1)
}

// UpdateAlertRule mocks base method.
func (m *MockAlertService) UpdateAlertRule(arg0 context.Context, arg1 domain.AlertRule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAlertRule", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAlertRule indicates an expected call of UpdateAlertRule.
func (mr *MockAlertServiceMockRecorder) UpdateAlertRule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAlertRule", reflect.TypeOf((*MockAlertService)(nil).UpdateAlertRule), arg0, arg1)
}
