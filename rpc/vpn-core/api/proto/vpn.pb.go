// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: api/proto/vpn.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TunnelStatus int32

const (
	TunnelStatus_TUNNEL_STATUS_UNSPECIFIED TunnelStatus = 0
	TunnelStatus_TUNNEL_STATUS_INACTIVE    TunnelStatus = 1
	TunnelStatus_TUNNEL_STATUS_ACTIVE      TunnelStatus = 2
	TunnelStatus_TUNNEL_STATUS_ERROR       TunnelStatus = 3
	TunnelStatus_TUNNEL_STATUS_RECOVERING  TunnelStatus = 4
)

// Enum value maps for TunnelStatus.
var (
	TunnelStatus_name = map[int32]string{
		0: "TUNNEL_STATUS_UNSPECIFIED",
		1: "TUNNEL_STATUS_INACTIVE",
		2: "TUNNEL_STATUS_ACTIVE",
		3: "TUNNEL_STATUS_ERROR",
		4: "TUNNEL_STATUS_RECOVERING",
	}
	TunnelStatus_value = map[string]int32{
		"TUNNEL_STATUS_UNSPECIFIED": 0,
		"TUNNEL_STATUS_INACTIVE":    1,
		"TUNNEL_STATUS_ACTIVE":      2,
		"TUNNEL_STATUS_ERROR":       3,
		"TUNNEL_STATUS_RECOVERING":  4,
	}
)

func (x TunnelStatus) Enum() *TunnelStatus {
	p := new(TunnelStatus)
	*p = x
	return p
}

func (x TunnelStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TunnelStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_vpn_proto_enumTypes[0].Descriptor()
}

func (TunnelStatus) Type() protoreflect.EnumType {
	return &file_api_proto_vpn_proto_enumTypes[0]
}

func (x TunnelStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TunnelStatus.Descriptor instead.
func (TunnelStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_vpn_proto_rawDescGZIP(), []int{0}
}

type PeerStatus int32

const (
	PeerStatus_PEER_STATUS_UNSPECIFIED PeerStatus = 0
	PeerStatus_PEER_STATUS_INACTIVE    PeerStatus = 1
	PeerStatus_PEER_STATUS_ACTIVE      PeerStatus = 2
	PeerStatus_PEER_STATUS_ERROR       PeerStatus = 3
	PeerStatus_PEER_STATUS_OFFLINE     PeerStatus = 4
)

// Enum value maps for PeerStatus.
var (
	PeerStatus_name = map[int32]string{
		0: "PEER_STATUS_UNSPECIFIED",
		1: "PEER_STATUS_INACTIVE",
		2: "PEER_STATUS_ACTIVE",
		3: "PEER_STATUS_ERROR",
		4: "PEER_STATUS_OFFLINE",
	}
	PeerStatus_value = map[string]int32{
		"PEER_STATUS_UNSPECIFIED": 0,
		"PEER_STATUS_INACTIVE":    1,
		"PEER_STATUS_ACTIVE":      2,
		"PEER_STATUS_ERROR":       3,
		"PEER_STATUS_OFFLINE":     4,
	}
)

func (x PeerStatus) Enum() *PeerStatus {
	p := new(PeerStatus)
	*p = x
	return p
}

func (x PeerStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PeerStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_vpn_proto_enumTypes[1].Descriptor()
}

func (PeerStatus) Type() protoreflect.EnumType {
	return &file_api_proto_vpn_proto_enumTypes[1]
}

func (x PeerStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PeerStatus.Descriptor instead.
func (PeerStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_vpn_proto_rawDescGZIP(), []int{1}
}

// Health
type HealthRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthRequest) Reset() {
	*x = HealthRequest{}
	mi := &file_api_proto_vpn_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthRequest) ProtoMessage() {}

func (x *HealthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vpn_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthRequest.ProtoReflect.Descriptor instead.
func (*HealthRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_vpn_proto_rawDescGZIP(), []int{0}
}

type HealthResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Version       string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthResponse) Reset() {
	*x = HealthResponse{}
	mi := &file_api_proto_vpn_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthResponse) ProtoMessage() {}

func (x *HealthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vpn_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthResponse.ProtoReflect.Descriptor instead.
func (*HealthResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_vpn_proto_rawDescGZIP(), []int{1}
}

func (x *HealthResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *HealthResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *HealthResponse) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// Tunnel
type Tunnel struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Id         string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Interface  string                 `protobuf:"bytes,3,opt,name=interface,proto3" json:"interface,omitempty"`
	Status     TunnelStatus           `protobuf:"varint,4,opt,name=status,proto3,enum=vpn.TunnelStatus" json:"status,omitempty"`
	PublicKey  string                 `protobuf:"bytes,5,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	PrivateKey string                 `protobuf:"bytes,6,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	ListenPort int32                  `protobuf:"varint,7,opt,name=listen_port,json=listenPort,proto3" json:"listen_port,omitempty"`
	Mtu        int32                  `protobuf:"varint,8,opt,name=mtu,proto3" json:"mtu,omitempty"`
	CreatedAt  *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt  *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Новые поля для мониторинга
	LastHealthCheck  *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=last_health_check,json=lastHealthCheck,proto3" json:"last_health_check,omitempty"`
	HealthStatus     string                 `protobuf:"bytes,12,opt,name=health_status,json=healthStatus,proto3" json:"health_status,omitempty"`
	AutoRecovery     bool                   `protobuf:"varint,13,opt,name=auto_recovery,json=autoRecovery,proto3" json:"auto_recovery,omitempty"`
	RecoveryAttempts int32                  `protobuf:"varint,14,opt,name=recovery_attempts,json=recoveryAttempts,proto3" json:"recovery_attempts,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Tunnel) Reset() {
	*x = Tunnel{}
	mi := &file_api_proto_vpn_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tunnel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tunnel) ProtoMessage() {}

func (x *Tunnel) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vpn_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tunnel.ProtoReflect.Descriptor instead.
func (*Tunnel) Descriptor() ([]byte, []int) {
	return file_api_proto_vpn_proto_rawDescGZIP(), []int{2}
}

func (x *Tunnel) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Tunnel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tunnel) GetInterface() string {
	if x != nil {
		return x.Interface
	}
	return ""
}

func (x *Tunnel) GetStatus() TunnelStatus {
	if x != nil {
		return x.Status
	}
	return TunnelStatus_TUNNEL_STATUS_UNSPECIFIED
}

func (x *Tunnel) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *Tunnel) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *Tunnel) GetListenPort() int32 {
	if x != nil {
		return x.ListenPort
	}
	return 0
}

func (x *Tunnel) GetMtu() int32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (x *Tunnel) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Tunnel) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Tunnel) GetLastHealthCheck() *timestamppb.Timestamp {
	if x != nil {
		return x.LastHealthCheck
	}
	return nil
}

func (x *Tunnel) GetHealthStatus() string {
	if x != nil {
		return x.HealthStatus
	}
	return ""
}

func (x *Tunnel) GetAutoRecovery() bool {
	if x != nil {
		return x.AutoRecovery
	}
	return false
}

func (x *Tunnel) GetRecoveryAttempts() int32 {
	if x != nil {
		return x.RecoveryAttempts
	}
	return 0
}

type CreateTunnelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ListenPort    int32                  `protobuf:"varint,2,opt,name=listen_port,json=listenPort,proto3" json:"listen_port,omitempty"`
	Mtu           int32                  `protobuf:"varint,3,opt,name=mtu,proto3" json:"mtu,omitempty"`
	AutoRecovery  bool                   `protobuf:"varint,4,opt,name=auto_recovery,json=autoRecovery,proto3" json:"auto_recovery,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTunnelRequest) Reset() {
	*x = CreateTunnelRequest{}
	mi := &file_api_proto_vpn_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTunnelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTunnelRequest) ProtoMessage() {}

func (x *CreateTunnelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vpn_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTunnelRequest.ProtoReflect.Descriptor instead.
func (*CreateTunnelRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_vpn_proto_rawDescGZIP(), []int{3}
}

func (x *CreateTunnelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateTunnelRequest) GetListenPort() int32 {
	if x != nil {
		return x.ListenPort
	}
	return 0
}

func (x *CreateTunnelRequest) GetMtu() int32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (x *CreateTunnelRequest) GetAutoRecovery() bool {
	if x != nil {
		return x.AutoRecovery
	}
	return false
}

type GetTunnelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTunnelRequest) Reset() {
	*x = GetTunnelRequest{}
	mi := &file_api_proto_vpn_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTunnelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTunnelRequest) ProtoMessage() {}

func (x *GetTunnelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vpn_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTunnelRequest.ProtoReflect.Descriptor instead.
func (*GetTunnelRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_vpn_proto_rawDescGZIP(), []int{4}
}

func (x *GetTunnelRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ListTunnelsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTunnelsRequest) Reset() {
	*x = ListTunnelsRequest{}
	mi := &file_api_proto_vpn_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTunnelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTunnelsRequest) ProtoMessage() {}

func (x *ListTunnelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vpn_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTunnelsRequest.ProtoReflect.Descriptor instead.
func (*ListTunnelsRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_vpn_proto_rawDescGZIP(), []int{5}
}

type ListTunnelsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tunnels       []*Tunnel              `protobuf:"bytes,1,rep,name=tunnels,proto3" json:"tunnels,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTunnelsResponse) Reset() {
	*x = ListTunnelsResponse{}
	mi := &file_api_proto_vpn_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTunnelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTunnelsResponse) ProtoMessage() {}

func (x *ListTunnelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vpn_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTunnelsResponse.ProtoReflect.Descriptor instead.
func (*ListTunnelsResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_vpn_proto_rawDescGZIP(), []int{6}
}

func (x *ListTunnelsResponse) GetTunnels() []*Tunnel {
	if x != nil {
		return x.Tunnels
	}
	return nil
}

type DeleteTunnelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTunnelRequest) Reset() {
	*x = DeleteTunnelRequest{}
	mi := &file_api_proto_vpn_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTunnelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTunnelRequest) ProtoMessage() {}

func (x *DeleteTunnelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vpn_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTunnelRequest.ProtoReflect.Descriptor instead.
func (*DeleteTunnelRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_vpn_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteTunnelRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteTunnelResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTunnelResponse) Reset() {
	*x = DeleteTunnelResponse{}
	mi := &file_api_proto_vpn_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTunnelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTunnelResponse) ProtoMessage() {}

func (x *DeleteTunnelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vpn_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTunnelResponse.ProtoReflect.Descriptor instead.
func (*DeleteTunnelResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_vpn_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteTunnelResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type StartTunnelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartTunnelRequest) Reset() {
	*x = StartTunnelRequest{}
	mi := &file_api_proto_vpn_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartTunnelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTunnelRequest) ProtoMessage() {}

func (x *StartTunnelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vpn_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTunnelRequest.ProtoReflect.Descriptor instead.
func (*StartTunnelRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_vpn_proto_rawDescGZIP(), []int{9}
}

func (x *StartTunnelRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type StartTunnelResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartTunnelResponse) Reset() {
	*x = StartTunnelResponse{}
	mi := &file_api_proto_vpn_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartTunnelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTunnelResponse) ProtoMessage() {}

func (x *StartTunnelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vpn_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTunnelResponse.ProtoReflect.Descriptor instead.
func (*StartTunnelResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_vpn_proto_rawDescGZIP(), []int{10}
}

func (x *StartTunnelResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type StopTunnelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopTunnelRequest) Reset() {
	*x = StopTunnelRequest{}
	mi := &file_api_proto_vpn_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopTunnelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopTunnelRequest) ProtoMessage() {}

func (x *StopTunnelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vpn_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopTunnelRequest.ProtoReflect.Descriptor instead.
func (*StopTunnelRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_vpn_proto_rawDescGZIP(), []int{11}
}

func (x *StopTunnelRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type StopTunnelResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopTunnelResponse) Reset() {
	*x = StopTunnelResponse{}
	mi := &file_api_proto_vpn_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopTunnelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopTunnelResponse) ProtoMessage() {}

func (x *StopTunnelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vpn_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopTunnelResponse.ProtoReflect.Descriptor instead.
func (*StopTunnelResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_vpn_proto_rawDescGZIP(), []int{12}
}

func (x *StopTunnelResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetTunnelStatsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTunnelStatsRequest) Reset() {
	*x = GetTunnelStatsRequest{}
	mi := &file_api_proto_vpn_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTunnelStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTunnelStatsRequest) ProtoMessage() {}

func (x *GetTunnelStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vpn_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTunnelStatsRequest.ProtoReflect.Descriptor instead.
func (*GetTunnelStatsRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_vpn_proto_rawDescGZIP(), []int{13}
}

func (x *GetTunnelStatsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type TunnelStats struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	TunnelId    string                 `protobuf:"bytes,1,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	BytesRx     int64                  `protobuf:"varint,2,opt,name=bytes_rx,json=bytesRx,proto3" json:"bytes_rx,omitempty"`
	BytesTx     int64                  `protobuf:"varint,3,opt,name=bytes_tx,json=bytesTx,proto3" json:"bytes_tx,omitempty"`
	PeersCount  int32                  `protobuf:"varint,4,opt,name=peers_count,json=peersCount,proto3" json:"peers_count,omitempty"`
	ActivePeers int32                  `protobuf:"varint,5,opt,name=active_peers,json=activePeers,proto3" json:"active_peers,omitempty"`
	LastUpdated *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	// Новые поля для детальной статистики
	Uptime        int64 `protobuf:"varint,7,opt,name=uptime,proto3" json:"uptime,omitempty"`
	ErrorCount    int32 `protobuf:"varint,8,opt,name=error_count,json=errorCount,proto3" json:"error_count,omitempty"`
	RecoveryCount int32 `protobuf:"varint,9,opt,name=recovery_count,json=recoveryCount,proto3" json:"recovery_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TunnelStats) Reset() {
	*x = TunnelStats{}
	mi := &file_api_proto_vpn_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TunnelStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelStats) ProtoMessage() {}

func (x *TunnelStats) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vpn_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelStats.ProtoReflect.Descriptor instead.
func (*TunnelStats) Descriptor() ([]byte, []int) {
	return file_api_proto_vpn_proto_rawDescGZIP(), []int{14}
}

func (x *TunnelStats) GetTunnelId() string {
	if x != nil {
		return x.TunnelId
	}
	return ""
}

func (x *TunnelStats) GetBytesRx() int64 {
	if x != nil {
		return x.BytesRx
	}
	return 0
}

func (x *TunnelStats) GetBytesTx() int64 {
	if x != nil {
		return x.BytesTx
	}
	return 0
}

func (x *TunnelStats) GetPeersCount() int32 {
	if x != nil {
		return x.PeersCount
	}
	return 0
}

func (x *TunnelStats) GetActivePeers() int32 {
	if x != nil {
		return x.ActivePeers
	}
	return 0
}

func (x *TunnelStats) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

func (x *TunnelStats) GetUptime() int64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *TunnelStats) GetErrorCount() int32 {
	if x != nil {
		return x.ErrorCount
	}
	return 0
}

func (x *TunnelStats) GetRecoveryCount() int32 {
	if x != nil {
		return x.RecoveryCount
	}
	return 0
}

// Новые сообщения для мониторинга и восстановления
type HealthCheckRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TunnelId      string                 `protobuf:"bytes,1,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheckRequest) Reset() {
	*x = HealthCheckRequest{}
	mi := &file_api_proto_vpn_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckRequest) ProtoMessage() {}

func (x *HealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vpn_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckRequest.ProtoReflect.Descriptor instead.
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_vpn_proto_rawDescGZIP(), []int{15}
}

func (x *HealthCheckRequest) GetTunnelId() string {
	if x != nil {
		return x.TunnelId
	}
	return ""
}

type HealthCheckResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TunnelId      string                 `protobuf:"bytes,1,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	Status        string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	LastCheck     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_check,json=lastCheck,proto3" json:"last_check,omitempty"`
	PeersHealth   []*PeerHealth          `protobuf:"bytes,4,rep,name=peers_health,json=peersHealth,proto3" json:"peers_health,omitempty"`
	Uptime        int64                  `protobuf:"varint,5,opt,name=uptime,proto3" json:"uptime,omitempty"`
	ErrorCount    int32                  `protobuf:"varint,6,opt,name=error_count,json=errorCount,proto3" json:"error_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	mi := &file_api_proto_vpn_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vpn_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_vpn_proto_rawDescGZIP(), []int{16}
}

func (x *HealthCheckResponse) GetTunnelId() string {
	if x != nil {
		return x.TunnelId
	}
	return ""
}

func (x *HealthCheckResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *HealthCheckResponse) GetLastCheck() *timestamppb.Timestamp {
	if x != nil {
		return x.LastCheck
	}
	return nil
}

func (x *HealthCheckResponse) GetPeersHealth() []*PeerHealth {
	if x != nil {
		return x.PeersHealth
	}
	return nil
}

func (x *HealthCheckResponse) GetUptime() int64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *HealthCheckResponse) GetErrorCount() int32 {
	if x != nil {
		return x.ErrorCount
	}
	return 0
}

type PeerHealth struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	PeerId            string                 `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Status            PeerStatus             `protobuf:"varint,2,opt,name=status,proto3,enum=vpn.PeerStatus" json:"status,omitempty"`
	LastHandshake     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_handshake,json=lastHandshake,proto3" json:"last_handshake,omitempty"`
	Latency           int64                  `protobuf:"varint,4,opt,name=latency,proto3" json:"latency,omitempty"`
	PacketLoss        float64                `protobuf:"fixed64,5,opt,name=packet_loss,json=packetLoss,proto3" json:"packet_loss,omitempty"`
	ConnectionQuality float64                `protobuf:"fixed64,6,opt,name=connection_quality,json=connectionQuality,proto3" json:"connection_quality,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *PeerHealth) Reset() {
	*x = PeerHealth{}
	mi := &file_api_proto_vpn_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeerHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerHealth) ProtoMessage() {}

func (x *PeerHealth) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vpn_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerHealth.ProtoReflect.Descriptor instead.
func (*PeerHealth) Descriptor() ([]byte, []int) {
	return file_api_proto_vpn_proto_rawDescGZIP(), []int{17}
}

func (x *PeerHealth) GetPeerId() string {
	if x != nil {
		return x.PeerId
	}
	return ""
}

func (x *PeerHealth) GetStatus() PeerStatus {
	if x != nil {
		return x.Status
	}
	return PeerStatus_PEER_STATUS_UNSPECIFIED
}

func (x *PeerHealth) GetLastHandshake() *timestamppb.Timestamp {
	if x != nil {
		return x.LastHandshake
	}
	return nil
}

func (x *PeerHealth) GetLatency() int64 {
	if x != nil {
		return x.Latency
	}
	return 0
}

func (x *PeerHealth) GetPacketLoss() float64 {
	if x != nil {
		return x.PacketLoss
	}
	return 0
}

func (x *PeerHealth) GetConnectionQuality() float64 {
	if x != nil {
		return x.ConnectionQuality
	}
	return 0
}

type EnableAutoRecoveryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TunnelId      string                 `protobuf:"bytes,1,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnableAutoRecoveryRequest) Reset() {
	*x = EnableAutoRecoveryRequest{}
	mi := &file_api_proto_vpn_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnableAutoRecoveryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableAutoRecoveryRequest) ProtoMessage() {}

func (x *EnableAutoRecoveryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vpn_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableAutoRecoveryRequest.ProtoReflect.Descriptor instead.
func (*EnableAutoRecoveryRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_vpn_proto_rawDescGZIP(), []int{18}
}

func (x *EnableAutoRecoveryRequest) GetTunnelId() string {
	if x != nil {
		return x.TunnelId
	}
	return ""
}

type EnableAutoRecoveryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnableAutoRecoveryResponse) Reset() {
	*x = EnableAutoRecoveryResponse{}
	mi := &file_api_proto_vpn_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnableAutoRecoveryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableAutoRecoveryResponse) ProtoMessage() {}

func (x *EnableAutoRecoveryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vpn_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableAutoRecoveryResponse.ProtoReflect.Descriptor instead.
func (*EnableAutoRecoveryResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_vpn_proto_rawDescGZIP(), []int{19}
}

func (x *EnableAutoRecoveryResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type DisableAutoRecoveryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TunnelId      string                 `protobuf:"bytes,1,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisableAutoRecoveryRequest) Reset() {
	*x = DisableAutoRecoveryRequest{}
	mi := &file_api_proto_vpn_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisableAutoRecoveryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableAutoRecoveryRequest) ProtoMessage() {}

func (x *DisableAutoRecoveryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vpn_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableAutoRecoveryRequest.ProtoReflect.Descriptor instead.
func (*DisableAutoRecoveryRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_vpn_proto_rawDescGZIP(), []int{20}
}

func (x *DisableAutoRecoveryRequest) GetTunnelId() string {
	if x != nil {
		return x.TunnelId
	}
	return ""
}

type DisableAutoRecoveryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisableAutoRecoveryResponse) Reset() {
	*x = DisableAutoRecoveryResponse{}
	mi := &file_api_proto_vpn_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisableAutoRecoveryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableAutoRecoveryResponse) ProtoMessage() {}

func (x *DisableAutoRecoveryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vpn_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableAutoRecoveryResponse.ProtoReflect.Descriptor instead.
func (*DisableAutoRecoveryResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_vpn_proto_rawDescGZIP(), []int{21}
}

func (x *DisableAutoRecoveryResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type RecoverTunnelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TunnelId      string                 `protobuf:"bytes,1,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecoverTunnelRequest) Reset() {
	*x = RecoverTunnelRequest{}
	mi := &file_api_proto_vpn_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecoverTunnelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoverTunnelRequest) ProtoMessage() {}

func (x *RecoverTunnelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vpn_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoverTunnelRequest.ProtoReflect.Descriptor instead.
func (*RecoverTunnelRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_vpn_proto_rawDescGZIP(), []int{22}
}

func (x *RecoverTunnelRequest) GetTunnelId() string {
	if x != nil {
		return x.TunnelId
	}
	return ""
}

type RecoverTunnelResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecoverTunnelResponse) Reset() {
	*x = RecoverTunnelResponse{}
	mi := &file_api_proto_vpn_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecoverTunnelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoverTunnelResponse) ProtoMessage() {}

func (x *RecoverTunnelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vpn_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoverTunnelResponse.ProtoReflect.Descriptor instead.
func (*RecoverTunnelResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_vpn_proto_rawDescGZIP(), []int{23}
}

func (x *RecoverTunnelResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Peer
type Peer struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Id         string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TunnelId   string                 `protobuf:"bytes,2,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	Name       string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	PublicKey  string                 `protobuf:"bytes,4,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	AllowedIps string                 `protobuf:"bytes,5,opt,name=allowed_ips,json=allowedIps,proto3" json:"allowed_ips,omitempty"`
	Endpoint   string                 `protobuf:"bytes,6,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Keepalive  int32                  `protobuf:"varint,7,opt,name=keepalive,proto3" json:"keepalive,omitempty"`
	Status     PeerStatus             `protobuf:"varint,8,opt,name=status,proto3,enum=vpn.PeerStatus" json:"status,omitempty"`
	CreatedAt  *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt  *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Новые поля для мониторинга
	LastSeen          *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`
	ConnectionQuality float64                `protobuf:"fixed64,12,opt,name=connection_quality,json=connectionQuality,proto3" json:"connection_quality,omitempty"`
	Latency           int64                  `protobuf:"varint,13,opt,name=latency,proto3" json:"latency,omitempty"`
	PacketLoss        float64                `protobuf:"fixed64,14,opt,name=packet_loss,json=packetLoss,proto3" json:"packet_loss,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Peer) Reset() {
	*x = Peer{}
	mi := &file_api_proto_vpn_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Peer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Peer) ProtoMessage() {}

func (x *Peer) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vpn_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Peer.ProtoReflect.Descriptor instead.
func (*Peer) Descriptor() ([]byte, []int) {
	return file_api_proto_vpn_proto_rawDescGZIP(), []int{24}
}

func (x *Peer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Peer) GetTunnelId() string {
	if x != nil {
		return x.TunnelId
	}
	return ""
}

func (x *Peer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Peer) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *Peer) GetAllowedIps() string {
	if x != nil {
		return x.AllowedIps
	}
	return ""
}

func (x *Peer) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Peer) GetKeepalive() int32 {
	if x != nil {
		return x.Keepalive
	}
	return 0
}

func (x *Peer) GetStatus() PeerStatus {
	if x != nil {
		return x.Status
	}
	return PeerStatus_PEER_STATUS_UNSPECIFIED
}

func (x *Peer) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Peer) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Peer) GetLastSeen() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSeen
	}
	return nil
}

func (x *Peer) GetConnectionQuality() float64 {
	if x != nil {
		return x.ConnectionQuality
	}
	return 0
}

func (x *Peer) GetLatency() int64 {
	if x != nil {
		return x.Latency
	}
	return 0
}

func (x *Peer) GetPacketLoss() float64 {
	if x != nil {
		return x.PacketLoss
	}
	return 0
}

type AddPeerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TunnelId      string                 `protobuf:"bytes,1,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	PublicKey     string                 `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	AllowedIps    string                 `protobuf:"bytes,4,opt,name=allowed_ips,json=allowedIps,proto3" json:"allowed_ips,omitempty"`
	Endpoint      string                 `protobuf:"bytes,5,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Keepalive     int32                  `protobuf:"varint,6,opt,name=keepalive,proto3" json:"keepalive,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddPeerRequest) Reset() {
	*x = AddPeerRequest{}
	mi := &file_api_proto_vpn_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddPeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPeerRequest) ProtoMessage() {}

func (x *AddPeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vpn_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPeerRequest.ProtoReflect.Descriptor instead.
func (*AddPeerRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_vpn_proto_rawDescGZIP(), []int{25}
}

func (x *AddPeerRequest) GetTunnelId() string {
	if x != nil {
		return x.TunnelId
	}
	return ""
}

func (x *AddPeerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddPeerRequest) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *AddPeerRequest) GetAllowedIps() string {
	if x != nil {
		return x.AllowedIps
	}
	return ""
}

func (x *AddPeerRequest) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *AddPeerRequest) GetKeepalive() int32 {
	if x != nil {
		return x.Keepalive
	}
	return 0
}

type GetPeerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TunnelId      string                 `protobuf:"bytes,1,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	PeerId        string                 `protobuf:"bytes,2,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPeerRequest) Reset() {
	*x = GetPeerRequest{}
	mi := &file_api_proto_vpn_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPeerRequest) ProtoMessage() {}

func (x *GetPeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vpn_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPeerRequest.ProtoReflect.Descriptor instead.
func (*GetPeerRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_vpn_proto_rawDescGZIP(), []int{26}
}

func (x *GetPeerRequest) GetTunnelId() string {
	if x != nil {
		return x.TunnelId
	}
	return ""
}

func (x *GetPeerRequest) GetPeerId() string {
	if x != nil {
		return x.PeerId
	}
	return ""
}

type ListPeersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TunnelId      string                 `protobuf:"bytes,1,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPeersRequest) Reset() {
	*x = ListPeersRequest{}
	mi := &file_api_proto_vpn_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPeersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPeersRequest) ProtoMessage() {}

func (x *ListPeersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vpn_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPeersRequest.ProtoReflect.Descriptor instead.
func (*ListPeersRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_vpn_proto_rawDescGZIP(), []int{27}
}

func (x *ListPeersRequest) GetTunnelId() string {
	if x != nil {
		return x.TunnelId
	}
	return ""
}

type ListPeersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Peers         []*Peer                `protobuf:"bytes,1,rep,name=peers,proto3" json:"peers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPeersResponse) Reset() {
	*x = ListPeersResponse{}
	mi := &file_api_proto_vpn_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPeersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPeersResponse) ProtoMessage() {}

func (x *ListPeersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vpn_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPeersResponse.ProtoReflect.Descriptor instead.
func (*ListPeersResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_vpn_proto_rawDescGZIP(), []int{28}
}

func (x *ListPeersResponse) GetPeers() []*Peer {
	if x != nil {
		return x.Peers
	}
	return nil
}

type RemovePeerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TunnelId      string                 `protobuf:"bytes,1,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	PeerId        string                 `protobuf:"bytes,2,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemovePeerRequest) Reset() {
	*x = RemovePeerRequest{}
	mi := &file_api_proto_vpn_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemovePeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePeerRequest) ProtoMessage() {}

func (x *RemovePeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vpn_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePeerRequest.ProtoReflect.Descriptor instead.
func (*RemovePeerRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_vpn_proto_rawDescGZIP(), []int{29}
}

func (x *RemovePeerRequest) GetTunnelId() string {
	if x != nil {
		return x.TunnelId
	}
	return ""
}

func (x *RemovePeerRequest) GetPeerId() string {
	if x != nil {
		return x.PeerId
	}
	return ""
}

type RemovePeerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemovePeerResponse) Reset() {
	*x = RemovePeerResponse{}
	mi := &file_api_proto_vpn_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemovePeerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePeerResponse) ProtoMessage() {}

func (x *RemovePeerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vpn_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePeerResponse.ProtoReflect.Descriptor instead.
func (*RemovePeerResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_vpn_proto_rawDescGZIP(), []int{30}
}

func (x *RemovePeerResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_api_proto_vpn_proto protoreflect.FileDescriptor

const file_api_proto_vpn_proto_rawDesc = "" +
	"\n" +
	"\x13api/proto/vpn.proto\x12\x03vpn\x1a\x1fgoogle/protobuf/timestamp.proto\"\x0f\n" +
	"\rHealthRequest\"|\n" +
	"\x0eHealthResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\tR\x06status\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\x128\n" +
	"\ttimestamp\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\"\x9d\x04\n" +
	"\x06Tunnel\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1c\n" +
	"\tinterface\x18\x03 \x01(\tR\tinterface\x12)\n" +
	"\x06status\x18\x04 \x01(\x0e2\x11.vpn.TunnelStatusR\x06status\x12\x1d\n" +
	"\n" +
	"public_key\x18\x05 \x01(\tR\tpublicKey\x12\x1f\n" +
	"\vprivate_key\x18\x06 \x01(\tR\n" +
	"privateKey\x12\x1f\n" +
	"\vlisten_port\x18\a \x01(\x05R\n" +
	"listenPort\x12\x10\n" +
	"\x03mtu\x18\b \x01(\x05R\x03mtu\x129\n" +
	"\n" +
	"created_at\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"updated_at\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\x12F\n" +
	"\x11last_health_check\x18\v \x01(\v2\x1a.google.protobuf.TimestampR\x0flastHealthCheck\x12#\n" +
	"\rhealth_status\x18\f \x01(\tR\fhealthStatus\x12#\n" +
	"\rauto_recovery\x18\r \x01(\bR\fautoRecovery\x12+\n" +
	"\x11recovery_attempts\x18\x0e \x01(\x05R\x10recoveryAttempts\"\x81\x01\n" +
	"\x13CreateTunnelRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1f\n" +
	"\vlisten_port\x18\x02 \x01(\x05R\n" +
	"listenPort\x12\x10\n" +
	"\x03mtu\x18\x03 \x01(\x05R\x03mtu\x12#\n" +
	"\rauto_recovery\x18\x04 \x01(\bR\fautoRecovery\"\"\n" +
	"\x10GetTunnelRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"\x14\n" +
	"\x12ListTunnelsRequest\"<\n" +
	"\x13ListTunnelsResponse\x12%\n" +
	"\atunnels\x18\x01 \x03(\v2\v.vpn.TunnelR\atunnels\"%\n" +
	"\x13DeleteTunnelRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"0\n" +
	"\x14DeleteTunnelResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\"$\n" +
	"\x12StartTunnelRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"/\n" +
	"\x13StartTunnelResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\"#\n" +
	"\x11StopTunnelRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\".\n" +
	"\x12StopTunnelResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\"'\n" +
	"\x15GetTunnelStatsRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"\xc3\x02\n" +
	"\vTunnelStats\x12\x1b\n" +
	"\ttunnel_id\x18\x01 \x01(\tR\btunnelId\x12\x19\n" +
	"\bbytes_rx\x18\x02 \x01(\x03R\abytesRx\x12\x19\n" +
	"\bbytes_tx\x18\x03 \x01(\x03R\abytesTx\x12\x1f\n" +
	"\vpeers_count\x18\x04 \x01(\x05R\n" +
	"peersCount\x12!\n" +
	"\factive_peers\x18\x05 \x01(\x05R\vactivePeers\x12=\n" +
	"\flast_updated\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\vlastUpdated\x12\x16\n" +
	"\x06uptime\x18\a \x01(\x03R\x06uptime\x12\x1f\n" +
	"\verror_count\x18\b \x01(\x05R\n" +
	"errorCount\x12%\n" +
	"\x0erecovery_count\x18\t \x01(\x05R\rrecoveryCount\"1\n" +
	"\x12HealthCheckRequest\x12\x1b\n" +
	"\ttunnel_id\x18\x01 \x01(\tR\btunnelId\"\xf2\x01\n" +
	"\x13HealthCheckResponse\x12\x1b\n" +
	"\ttunnel_id\x18\x01 \x01(\tR\btunnelId\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\x129\n" +
	"\n" +
	"last_check\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\tlastCheck\x122\n" +
	"\fpeers_health\x18\x04 \x03(\v2\x0f.vpn.PeerHealthR\vpeersHealth\x12\x16\n" +
	"\x06uptime\x18\x05 \x01(\x03R\x06uptime\x12\x1f\n" +
	"\verror_count\x18\x06 \x01(\x05R\n" +
	"errorCount\"\xfb\x01\n" +
	"\n" +
	"PeerHealth\x12\x17\n" +
	"\apeer_id\x18\x01 \x01(\tR\x06peerId\x12'\n" +
	"\x06status\x18\x02 \x01(\x0e2\x0f.vpn.PeerStatusR\x06status\x12A\n" +
	"\x0elast_handshake\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\rlastHandshake\x12\x18\n" +
	"\alatency\x18\x04 \x01(\x03R\alatency\x12\x1f\n" +
	"\vpacket_loss\x18\x05 \x01(\x01R\n" +
	"packetLoss\x12-\n" +
	"\x12connection_quality\x18\x06 \x01(\x01R\x11connectionQuality\"8\n" +
	"\x19EnableAutoRecoveryRequest\x12\x1b\n" +
	"\ttunnel_id\x18\x01 \x01(\tR\btunnelId\"6\n" +
	"\x1aEnableAutoRecoveryResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\"9\n" +
	"\x1aDisableAutoRecoveryRequest\x12\x1b\n" +
	"\ttunnel_id\x18\x01 \x01(\tR\btunnelId\"7\n" +
	"\x1bDisableAutoRecoveryResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\"3\n" +
	"\x14RecoverTunnelRequest\x12\x1b\n" +
	"\ttunnel_id\x18\x01 \x01(\tR\btunnelId\"1\n" +
	"\x15RecoverTunnelResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\"\x83\x04\n" +
	"\x04Peer\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1b\n" +
	"\ttunnel_id\x18\x02 \x01(\tR\btunnelId\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x1d\n" +
	"\n" +
	"public_key\x18\x04 \x01(\tR\tpublicKey\x12\x1f\n" +
	"\vallowed_ips\x18\x05 \x01(\tR\n" +
	"allowedIps\x12\x1a\n" +
	"\bendpoint\x18\x06 \x01(\tR\bendpoint\x12\x1c\n" +
	"\tkeepalive\x18\a \x01(\x05R\tkeepalive\x12'\n" +
	"\x06status\x18\b \x01(\x0e2\x0f.vpn.PeerStatusR\x06status\x129\n" +
	"\n" +
	"created_at\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"updated_at\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\x127\n" +
	"\tlast_seen\x18\v \x01(\v2\x1a.google.protobuf.TimestampR\blastSeen\x12-\n" +
	"\x12connection_quality\x18\f \x01(\x01R\x11connectionQuality\x12\x18\n" +
	"\alatency\x18\r \x01(\x03R\alatency\x12\x1f\n" +
	"\vpacket_loss\x18\x0e \x01(\x01R\n" +
	"packetLoss\"\xbb\x01\n" +
	"\x0eAddPeerRequest\x12\x1b\n" +
	"\ttunnel_id\x18\x01 \x01(\tR\btunnelId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1d\n" +
	"\n" +
	"public_key\x18\x03 \x01(\tR\tpublicKey\x12\x1f\n" +
	"\vallowed_ips\x18\x04 \x01(\tR\n" +
	"allowedIps\x12\x1a\n" +
	"\bendpoint\x18\x05 \x01(\tR\bendpoint\x12\x1c\n" +
	"\tkeepalive\x18\x06 \x01(\x05R\tkeepalive\"F\n" +
	"\x0eGetPeerRequest\x12\x1b\n" +
	"\ttunnel_id\x18\x01 \x01(\tR\btunnelId\x12\x17\n" +
	"\apeer_id\x18\x02 \x01(\tR\x06peerId\"/\n" +
	"\x10ListPeersRequest\x12\x1b\n" +
	"\ttunnel_id\x18\x01 \x01(\tR\btunnelId\"4\n" +
	"\x11ListPeersResponse\x12\x1f\n" +
	"\x05peers\x18\x01 \x03(\v2\t.vpn.PeerR\x05peers\"I\n" +
	"\x11RemovePeerRequest\x12\x1b\n" +
	"\ttunnel_id\x18\x01 \x01(\tR\btunnelId\x12\x17\n" +
	"\apeer_id\x18\x02 \x01(\tR\x06peerId\".\n" +
	"\x12RemovePeerResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess*\x9a\x01\n" +
	"\fTunnelStatus\x12\x1d\n" +
	"\x19TUNNEL_STATUS_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16TUNNEL_STATUS_INACTIVE\x10\x01\x12\x18\n" +
	"\x14TUNNEL_STATUS_ACTIVE\x10\x02\x12\x17\n" +
	"\x13TUNNEL_STATUS_ERROR\x10\x03\x12\x1c\n" +
	"\x18TUNNEL_STATUS_RECOVERING\x10\x04*\x8b\x01\n" +
	"\n" +
	"PeerStatus\x12\x1b\n" +
	"\x17PEER_STATUS_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14PEER_STATUS_INACTIVE\x10\x01\x12\x16\n" +
	"\x12PEER_STATUS_ACTIVE\x10\x02\x12\x15\n" +
	"\x11PEER_STATUS_ERROR\x10\x03\x12\x17\n" +
	"\x13PEER_STATUS_OFFLINE\x10\x042\xff\a\n" +
	"\x0eVpnCoreService\x121\n" +
	"\x06Health\x12\x12.vpn.HealthRequest\x1a\x13.vpn.HealthResponse\x125\n" +
	"\fCreateTunnel\x12\x18.vpn.CreateTunnelRequest\x1a\v.vpn.Tunnel\x12/\n" +
	"\tGetTunnel\x12\x15.vpn.GetTunnelRequest\x1a\v.vpn.Tunnel\x12@\n" +
	"\vListTunnels\x12\x17.vpn.ListTunnelsRequest\x1a\x18.vpn.ListTunnelsResponse\x12C\n" +
	"\fDeleteTunnel\x12\x18.vpn.DeleteTunnelRequest\x1a\x19.vpn.DeleteTunnelResponse\x12@\n" +
	"\vStartTunnel\x12\x17.vpn.StartTunnelRequest\x1a\x18.vpn.StartTunnelResponse\x12=\n" +
	"\n" +
	"StopTunnel\x12\x16.vpn.StopTunnelRequest\x1a\x17.vpn.StopTunnelResponse\x12>\n" +
	"\x0eGetTunnelStats\x12\x1a.vpn.GetTunnelStatsRequest\x1a\x10.vpn.TunnelStats\x12@\n" +
	"\vHealthCheck\x12\x17.vpn.HealthCheckRequest\x1a\x18.vpn.HealthCheckResponse\x12U\n" +
	"\x12EnableAutoRecovery\x12\x1e.vpn.EnableAutoRecoveryRequest\x1a\x1f.vpn.EnableAutoRecoveryResponse\x12X\n" +
	"\x13DisableAutoRecovery\x12\x1f.vpn.DisableAutoRecoveryRequest\x1a .vpn.DisableAutoRecoveryResponse\x12F\n" +
	"\rRecoverTunnel\x12\x19.vpn.RecoverTunnelRequest\x1a\x1a.vpn.RecoverTunnelResponse\x12)\n" +
	"\aAddPeer\x12\x13.vpn.AddPeerRequest\x1a\t.vpn.Peer\x12)\n" +
	"\aGetPeer\x12\x13.vpn.GetPeerRequest\x1a\t.vpn.Peer\x12:\n" +
	"\tListPeers\x12\x15.vpn.ListPeersRequest\x1a\x16.vpn.ListPeersResponse\x12=\n" +
	"\n" +
	"RemovePeer\x12\x16.vpn.RemovePeerRequest\x1a\x17.vpn.RemovePeerResponseB3Z1github.com/par1ram/silence/rpc/vpn-core/api/protob\x06proto3"

var (
	file_api_proto_vpn_proto_rawDescOnce sync.Once
	file_api_proto_vpn_proto_rawDescData []byte
)

func file_api_proto_vpn_proto_rawDescGZIP() []byte {
	file_api_proto_vpn_proto_rawDescOnce.Do(func() {
		file_api_proto_vpn_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_proto_vpn_proto_rawDesc), len(file_api_proto_vpn_proto_rawDesc)))
	})
	return file_api_proto_vpn_proto_rawDescData
}

var file_api_proto_vpn_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_proto_vpn_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_api_proto_vpn_proto_goTypes = []any{
	(TunnelStatus)(0),                   // 0: vpn.TunnelStatus
	(PeerStatus)(0),                     // 1: vpn.PeerStatus
	(*HealthRequest)(nil),               // 2: vpn.HealthRequest
	(*HealthResponse)(nil),              // 3: vpn.HealthResponse
	(*Tunnel)(nil),                      // 4: vpn.Tunnel
	(*CreateTunnelRequest)(nil),         // 5: vpn.CreateTunnelRequest
	(*GetTunnelRequest)(nil),            // 6: vpn.GetTunnelRequest
	(*ListTunnelsRequest)(nil),          // 7: vpn.ListTunnelsRequest
	(*ListTunnelsResponse)(nil),         // 8: vpn.ListTunnelsResponse
	(*DeleteTunnelRequest)(nil),         // 9: vpn.DeleteTunnelRequest
	(*DeleteTunnelResponse)(nil),        // 10: vpn.DeleteTunnelResponse
	(*StartTunnelRequest)(nil),          // 11: vpn.StartTunnelRequest
	(*StartTunnelResponse)(nil),         // 12: vpn.StartTunnelResponse
	(*StopTunnelRequest)(nil),           // 13: vpn.StopTunnelRequest
	(*StopTunnelResponse)(nil),          // 14: vpn.StopTunnelResponse
	(*GetTunnelStatsRequest)(nil),       // 15: vpn.GetTunnelStatsRequest
	(*TunnelStats)(nil),                 // 16: vpn.TunnelStats
	(*HealthCheckRequest)(nil),          // 17: vpn.HealthCheckRequest
	(*HealthCheckResponse)(nil),         // 18: vpn.HealthCheckResponse
	(*PeerHealth)(nil),                  // 19: vpn.PeerHealth
	(*EnableAutoRecoveryRequest)(nil),   // 20: vpn.EnableAutoRecoveryRequest
	(*EnableAutoRecoveryResponse)(nil),  // 21: vpn.EnableAutoRecoveryResponse
	(*DisableAutoRecoveryRequest)(nil),  // 22: vpn.DisableAutoRecoveryRequest
	(*DisableAutoRecoveryResponse)(nil), // 23: vpn.DisableAutoRecoveryResponse
	(*RecoverTunnelRequest)(nil),        // 24: vpn.RecoverTunnelRequest
	(*RecoverTunnelResponse)(nil),       // 25: vpn.RecoverTunnelResponse
	(*Peer)(nil),                        // 26: vpn.Peer
	(*AddPeerRequest)(nil),              // 27: vpn.AddPeerRequest
	(*GetPeerRequest)(nil),              // 28: vpn.GetPeerRequest
	(*ListPeersRequest)(nil),            // 29: vpn.ListPeersRequest
	(*ListPeersResponse)(nil),           // 30: vpn.ListPeersResponse
	(*RemovePeerRequest)(nil),           // 31: vpn.RemovePeerRequest
	(*RemovePeerResponse)(nil),          // 32: vpn.RemovePeerResponse
	(*timestamppb.Timestamp)(nil),       // 33: google.protobuf.Timestamp
}
var file_api_proto_vpn_proto_depIdxs = []int32{
	33, // 0: vpn.HealthResponse.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 1: vpn.Tunnel.status:type_name -> vpn.TunnelStatus
	33, // 2: vpn.Tunnel.created_at:type_name -> google.protobuf.Timestamp
	33, // 3: vpn.Tunnel.updated_at:type_name -> google.protobuf.Timestamp
	33, // 4: vpn.Tunnel.last_health_check:type_name -> google.protobuf.Timestamp
	4,  // 5: vpn.ListTunnelsResponse.tunnels:type_name -> vpn.Tunnel
	33, // 6: vpn.TunnelStats.last_updated:type_name -> google.protobuf.Timestamp
	33, // 7: vpn.HealthCheckResponse.last_check:type_name -> google.protobuf.Timestamp
	19, // 8: vpn.HealthCheckResponse.peers_health:type_name -> vpn.PeerHealth
	1,  // 9: vpn.PeerHealth.status:type_name -> vpn.PeerStatus
	33, // 10: vpn.PeerHealth.last_handshake:type_name -> google.protobuf.Timestamp
	1,  // 11: vpn.Peer.status:type_name -> vpn.PeerStatus
	33, // 12: vpn.Peer.created_at:type_name -> google.protobuf.Timestamp
	33, // 13: vpn.Peer.updated_at:type_name -> google.protobuf.Timestamp
	33, // 14: vpn.Peer.last_seen:type_name -> google.protobuf.Timestamp
	26, // 15: vpn.ListPeersResponse.peers:type_name -> vpn.Peer
	2,  // 16: vpn.VpnCoreService.Health:input_type -> vpn.HealthRequest
	5,  // 17: vpn.VpnCoreService.CreateTunnel:input_type -> vpn.CreateTunnelRequest
	6,  // 18: vpn.VpnCoreService.GetTunnel:input_type -> vpn.GetTunnelRequest
	7,  // 19: vpn.VpnCoreService.ListTunnels:input_type -> vpn.ListTunnelsRequest
	9,  // 20: vpn.VpnCoreService.DeleteTunnel:input_type -> vpn.DeleteTunnelRequest
	11, // 21: vpn.VpnCoreService.StartTunnel:input_type -> vpn.StartTunnelRequest
	13, // 22: vpn.VpnCoreService.StopTunnel:input_type -> vpn.StopTunnelRequest
	15, // 23: vpn.VpnCoreService.GetTunnelStats:input_type -> vpn.GetTunnelStatsRequest
	17, // 24: vpn.VpnCoreService.HealthCheck:input_type -> vpn.HealthCheckRequest
	20, // 25: vpn.VpnCoreService.EnableAutoRecovery:input_type -> vpn.EnableAutoRecoveryRequest
	22, // 26: vpn.VpnCoreService.DisableAutoRecovery:input_type -> vpn.DisableAutoRecoveryRequest
	24, // 27: vpn.VpnCoreService.RecoverTunnel:input_type -> vpn.RecoverTunnelRequest
	27, // 28: vpn.VpnCoreService.AddPeer:input_type -> vpn.AddPeerRequest
	28, // 29: vpn.VpnCoreService.GetPeer:input_type -> vpn.GetPeerRequest
	29, // 30: vpn.VpnCoreService.ListPeers:input_type -> vpn.ListPeersRequest
	31, // 31: vpn.VpnCoreService.RemovePeer:input_type -> vpn.RemovePeerRequest
	3,  // 32: vpn.VpnCoreService.Health:output_type -> vpn.HealthResponse
	4,  // 33: vpn.VpnCoreService.CreateTunnel:output_type -> vpn.Tunnel
	4,  // 34: vpn.VpnCoreService.GetTunnel:output_type -> vpn.Tunnel
	8,  // 35: vpn.VpnCoreService.ListTunnels:output_type -> vpn.ListTunnelsResponse
	10, // 36: vpn.VpnCoreService.DeleteTunnel:output_type -> vpn.DeleteTunnelResponse
	12, // 37: vpn.VpnCoreService.StartTunnel:output_type -> vpn.StartTunnelResponse
	14, // 38: vpn.VpnCoreService.StopTunnel:output_type -> vpn.StopTunnelResponse
	16, // 39: vpn.VpnCoreService.GetTunnelStats:output_type -> vpn.TunnelStats
	18, // 40: vpn.VpnCoreService.HealthCheck:output_type -> vpn.HealthCheckResponse
	21, // 41: vpn.VpnCoreService.EnableAutoRecovery:output_type -> vpn.EnableAutoRecoveryResponse
	23, // 42: vpn.VpnCoreService.DisableAutoRecovery:output_type -> vpn.DisableAutoRecoveryResponse
	25, // 43: vpn.VpnCoreService.RecoverTunnel:output_type -> vpn.RecoverTunnelResponse
	26, // 44: vpn.VpnCoreService.AddPeer:output_type -> vpn.Peer
	26, // 45: vpn.VpnCoreService.GetPeer:output_type -> vpn.Peer
	30, // 46: vpn.VpnCoreService.ListPeers:output_type -> vpn.ListPeersResponse
	32, // 47: vpn.VpnCoreService.RemovePeer:output_type -> vpn.RemovePeerResponse
	32, // [32:48] is the sub-list for method output_type
	16, // [16:32] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_api_proto_vpn_proto_init() }
func file_api_proto_vpn_proto_init() {
	if File_api_proto_vpn_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_proto_vpn_proto_rawDesc), len(file_api_proto_vpn_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_proto_vpn_proto_goTypes,
		DependencyIndexes: file_api_proto_vpn_proto_depIdxs,
		EnumInfos:         file_api_proto_vpn_proto_enumTypes,
		MessageInfos:      file_api_proto_vpn_proto_msgTypes,
	}.Build()
	File_api_proto_vpn_proto = out.File
	file_api_proto_vpn_proto_goTypes = nil
	file_api_proto_vpn_proto_depIdxs = nil
}
