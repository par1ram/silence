// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/par1ram/silence/rpc/vpn-core/internal/ports (interfaces: KeyGenerator,WireGuardManager)

// Package services_test is a generated GoMock package.
package services_test

import (
	net "net"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	ports "github.com/par1ram/silence/rpc/vpn-core/internal/ports"
)

// MockKeyGenerator is a mock of KeyGenerator interface.
type MockKeyGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockKeyGeneratorMockRecorder
}

// MockKeyGeneratorMockRecorder is the mock recorder for MockKeyGenerator.
type MockKeyGeneratorMockRecorder struct {
	mock *MockKeyGenerator
}

// NewMockKeyGenerator creates a new mock instance.
func NewMockKeyGenerator(ctrl *gomock.Controller) *MockKeyGenerator {
	mock := &MockKeyGenerator{ctrl: ctrl}
	mock.recorder = &MockKeyGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyGenerator) EXPECT() *MockKeyGeneratorMockRecorder {
	return m.recorder
}

// GenerateKeyPair mocks base method.
func (m *MockKeyGenerator) GenerateKeyPair() (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateKeyPair")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateKeyPair indicates an expected call of GenerateKeyPair.
func (mr *MockKeyGeneratorMockRecorder) GenerateKeyPair() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateKeyPair", reflect.TypeOf((*MockKeyGenerator)(nil).GenerateKeyPair))
}

// ValidatePublicKey mocks base method.
func (m *MockKeyGenerator) ValidatePublicKey(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatePublicKey", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ValidatePublicKey indicates an expected call of ValidatePublicKey.
func (mr *MockKeyGeneratorMockRecorder) ValidatePublicKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatePublicKey", reflect.TypeOf((*MockKeyGenerator)(nil).ValidatePublicKey), arg0)
}

// MockWireGuardManager is a mock of WireGuardManager interface.
type MockWireGuardManager struct {
	ctrl     *gomock.Controller
	recorder *MockWireGuardManagerMockRecorder
}

// MockWireGuardManagerMockRecorder is the mock recorder for MockWireGuardManager.
type MockWireGuardManagerMockRecorder struct {
	mock *MockWireGuardManager
}

// NewMockWireGuardManager creates a new mock instance.
func NewMockWireGuardManager(ctrl *gomock.Controller) *MockWireGuardManager {
	mock := &MockWireGuardManager{ctrl: ctrl}
	mock.recorder = &MockWireGuardManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWireGuardManager) EXPECT() *MockWireGuardManagerMockRecorder {
	return m.recorder
}

// AddPeer mocks base method.
func (m *MockWireGuardManager) AddPeer(arg0, arg1 string, arg2 []net.IPNet, arg3 *net.UDPAddr, arg4 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPeer", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPeer indicates an expected call of AddPeer.
func (mr *MockWireGuardManagerMockRecorder) AddPeer(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPeer", reflect.TypeOf((*MockWireGuardManager)(nil).AddPeer), arg0, arg1, arg2, arg3, arg4)
}

// Close mocks base method.
func (m *MockWireGuardManager) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockWireGuardManagerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWireGuardManager)(nil).Close))
}

// CreateInterface mocks base method.
func (m *MockWireGuardManager) CreateInterface(arg0, arg1 string, arg2, arg3 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInterface", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInterface indicates an expected call of CreateInterface.
func (mr *MockWireGuardManagerMockRecorder) CreateInterface(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInterface", reflect.TypeOf((*MockWireGuardManager)(nil).CreateInterface), arg0, arg1, arg2, arg3)
}

// DeleteInterface mocks base method.
func (m *MockWireGuardManager) DeleteInterface(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInterface", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInterface indicates an expected call of DeleteInterface.
func (mr *MockWireGuardManagerMockRecorder) DeleteInterface(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInterface", reflect.TypeOf((*MockWireGuardManager)(nil).DeleteInterface), arg0)
}

// GetDeviceStats mocks base method.
func (m *MockWireGuardManager) GetDeviceStats(arg0 string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceStats", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceStats indicates an expected call of GetDeviceStats.
func (mr *MockWireGuardManagerMockRecorder) GetDeviceStats(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceStats", reflect.TypeOf((*MockWireGuardManager)(nil).GetDeviceStats), arg0)
}

// GetInterfaceStats mocks base method.
func (m *MockWireGuardManager) GetInterfaceStats(arg0 string) (*ports.InterfaceStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterfaceStats", arg0)
	ret0, _ := ret[0].(*ports.InterfaceStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterfaceStats indicates an expected call of GetInterfaceStats.
func (mr *MockWireGuardManagerMockRecorder) GetInterfaceStats(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterfaceStats", reflect.TypeOf((*MockWireGuardManager)(nil).GetInterfaceStats), arg0)
}

// GetPeerStats mocks base method.
func (m *MockWireGuardManager) GetPeerStats(arg0, arg1 string) (*ports.PeerStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeerStats", arg0, arg1)
	ret0, _ := ret[0].(*ports.PeerStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeerStats indicates an expected call of GetPeerStats.
func (mr *MockWireGuardManagerMockRecorder) GetPeerStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeerStats", reflect.TypeOf((*MockWireGuardManager)(nil).GetPeerStats), arg0, arg1)
}

// RemovePeer mocks base method.
func (m *MockWireGuardManager) RemovePeer(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePeer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePeer indicates an expected call of RemovePeer.
func (mr *MockWireGuardManagerMockRecorder) RemovePeer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePeer", reflect.TypeOf((*MockWireGuardManager)(nil).RemovePeer), arg0, arg1)
}
