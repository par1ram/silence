// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/par1ram/silence/rpc/vpn-core/internal/ports (interfaces: TunnelManager,PeerManager)

// Package services_test is a generated GoMock package.
package services_test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/par1ram/silence/rpc/vpn-core/internal/domain"
	ports "github.com/par1ram/silence/rpc/vpn-core/internal/ports"
)

// MockTunnelManager is a mock of TunnelManager interface.
type MockTunnelManager struct {
	ctrl     *gomock.Controller
	recorder *MockTunnelManagerMockRecorder
}

// MockTunnelManagerMockRecorder is the mock recorder for MockTunnelManager.
type MockTunnelManagerMockRecorder struct {
	mock *MockTunnelManager
}

// NewMockTunnelManager creates a new mock instance.
func NewMockTunnelManager(ctrl *gomock.Controller) *MockTunnelManager {
	mock := &MockTunnelManager{ctrl: ctrl}
	mock.recorder = &MockTunnelManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTunnelManager) EXPECT() *MockTunnelManagerMockRecorder {
	return m.recorder
}

// CreateTunnel mocks base method.
func (m *MockTunnelManager) CreateTunnel(arg0 context.Context, arg1 *domain.CreateTunnelRequest) (*domain.Tunnel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTunnel", arg0, arg1)
	ret0, _ := ret[0].(*domain.Tunnel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTunnel indicates an expected call of CreateTunnel.
func (mr *MockTunnelManagerMockRecorder) CreateTunnel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTunnel", reflect.TypeOf((*MockTunnelManager)(nil).CreateTunnel), arg0, arg1)
}

// DeleteTunnel mocks base method.
func (m *MockTunnelManager) DeleteTunnel(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTunnel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTunnel indicates an expected call of DeleteTunnel.
func (mr *MockTunnelManagerMockRecorder) DeleteTunnel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTunnel", reflect.TypeOf((*MockTunnelManager)(nil).DeleteTunnel), arg0, arg1)
}

// DisableAutoRecovery mocks base method.
func (m *MockTunnelManager) DisableAutoRecovery(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableAutoRecovery", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisableAutoRecovery indicates an expected call of DisableAutoRecovery.
func (mr *MockTunnelManagerMockRecorder) DisableAutoRecovery(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableAutoRecovery", reflect.TypeOf((*MockTunnelManager)(nil).DisableAutoRecovery), arg0, arg1)
}

// EnableAutoRecovery mocks base method.
func (m *MockTunnelManager) EnableAutoRecovery(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableAutoRecovery", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableAutoRecovery indicates an expected call of EnableAutoRecovery.
func (mr *MockTunnelManagerMockRecorder) EnableAutoRecovery(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableAutoRecovery", reflect.TypeOf((*MockTunnelManager)(nil).EnableAutoRecovery), arg0, arg1)
}

// GetTunnel mocks base method.
func (m *MockTunnelManager) GetTunnel(arg0 context.Context, arg1 string) (*domain.Tunnel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTunnel", arg0, arg1)
	ret0, _ := ret[0].(*domain.Tunnel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTunnel indicates an expected call of GetTunnel.
func (mr *MockTunnelManagerMockRecorder) GetTunnel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTunnel", reflect.TypeOf((*MockTunnelManager)(nil).GetTunnel), arg0, arg1)
}

// GetTunnelStats mocks base method.
func (m *MockTunnelManager) GetTunnelStats(arg0 context.Context, arg1 string) (*domain.TunnelStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTunnelStats", arg0, arg1)
	ret0, _ := ret[0].(*domain.TunnelStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTunnelStats indicates an expected call of GetTunnelStats.
func (mr *MockTunnelManagerMockRecorder) GetTunnelStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTunnelStats", reflect.TypeOf((*MockTunnelManager)(nil).GetTunnelStats), arg0, arg1)
}

// HealthCheck mocks base method.
func (m *MockTunnelManager) HealthCheck(arg0 context.Context, arg1 *domain.HealthCheckRequest) (*domain.HealthCheckResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck", arg0, arg1)
	ret0, _ := ret[0].(*domain.HealthCheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockTunnelManagerMockRecorder) HealthCheck(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockTunnelManager)(nil).HealthCheck), arg0, arg1)
}

// ListTunnels mocks base method.
func (m *MockTunnelManager) ListTunnels(arg0 context.Context) ([]*domain.Tunnel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTunnels", arg0)
	ret0, _ := ret[0].([]*domain.Tunnel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTunnels indicates an expected call of ListTunnels.
func (mr *MockTunnelManagerMockRecorder) ListTunnels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTunnels", reflect.TypeOf((*MockTunnelManager)(nil).ListTunnels), arg0)
}

// RecoverTunnel mocks base method.
func (m *MockTunnelManager) RecoverTunnel(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecoverTunnel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecoverTunnel indicates an expected call of RecoverTunnel.
func (mr *MockTunnelManagerMockRecorder) RecoverTunnel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecoverTunnel", reflect.TypeOf((*MockTunnelManager)(nil).RecoverTunnel), arg0, arg1)
}

// StartTunnel mocks base method.
func (m *MockTunnelManager) StartTunnel(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTunnel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartTunnel indicates an expected call of StartTunnel.
func (mr *MockTunnelManagerMockRecorder) StartTunnel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTunnel", reflect.TypeOf((*MockTunnelManager)(nil).StartTunnel), arg0, arg1)
}

// StopTunnel mocks base method.
func (m *MockTunnelManager) StopTunnel(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopTunnel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopTunnel indicates an expected call of StopTunnel.
func (mr *MockTunnelManagerMockRecorder) StopTunnel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopTunnel", reflect.TypeOf((*MockTunnelManager)(nil).StopTunnel), arg0, arg1)
}

// MockPeerManager is a mock of PeerManager interface.
type MockPeerManager struct {
	ctrl     *gomock.Controller
	recorder *MockPeerManagerMockRecorder
}

// MockPeerManagerMockRecorder is the mock recorder for MockPeerManager.
type MockPeerManagerMockRecorder struct {
	mock *MockPeerManager
}

// NewMockPeerManager creates a new mock instance.
func NewMockPeerManager(ctrl *gomock.Controller) *MockPeerManager {
	mock := &MockPeerManager{ctrl: ctrl}
	mock.recorder = &MockPeerManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPeerManager) EXPECT() *MockPeerManagerMockRecorder {
	return m.recorder
}

// AddPeer mocks base method.
func (m *MockPeerManager) AddPeer(arg0 context.Context, arg1 *domain.AddPeerRequest) (*domain.Peer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPeer", arg0, arg1)
	ret0, _ := ret[0].(*domain.Peer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPeer indicates an expected call of AddPeer.
func (mr *MockPeerManagerMockRecorder) AddPeer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPeer", reflect.TypeOf((*MockPeerManager)(nil).AddPeer), arg0, arg1)
}

// DisablePeer mocks base method.
func (m *MockPeerManager) DisablePeer(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisablePeer", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisablePeer indicates an expected call of DisablePeer.
func (mr *MockPeerManagerMockRecorder) DisablePeer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisablePeer", reflect.TypeOf((*MockPeerManager)(nil).DisablePeer), arg0, arg1, arg2)
}

// EnablePeer mocks base method.
func (m *MockPeerManager) EnablePeer(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnablePeer", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnablePeer indicates an expected call of EnablePeer.
func (mr *MockPeerManagerMockRecorder) EnablePeer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnablePeer", reflect.TypeOf((*MockPeerManager)(nil).EnablePeer), arg0, arg1, arg2)
}

// GetPeer mocks base method.
func (m *MockPeerManager) GetPeer(arg0 context.Context, arg1, arg2 string) (*domain.Peer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeer", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.Peer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeer indicates an expected call of GetPeer.
func (mr *MockPeerManagerMockRecorder) GetPeer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeer", reflect.TypeOf((*MockPeerManager)(nil).GetPeer), arg0, arg1, arg2)
}

// GetPeerHealth mocks base method.
func (m *MockPeerManager) GetPeerHealth(arg0 context.Context, arg1, arg2 string) (*domain.PeerHealth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeerHealth", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.PeerHealth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeerHealth indicates an expected call of GetPeerHealth.
func (mr *MockPeerManagerMockRecorder) GetPeerHealth(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeerHealth", reflect.TypeOf((*MockPeerManager)(nil).GetPeerHealth), arg0, arg1, arg2)
}

// ListPeers mocks base method.
func (m *MockPeerManager) ListPeers(arg0 context.Context, arg1 string) ([]*domain.Peer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPeers", arg0, arg1)
	ret0, _ := ret[0].([]*domain.Peer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPeers indicates an expected call of ListPeers.
func (mr *MockPeerManagerMockRecorder) ListPeers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPeers", reflect.TypeOf((*MockPeerManager)(nil).ListPeers), arg0, arg1)
}

// RemovePeer mocks base method.
func (m *MockPeerManager) RemovePeer(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePeer", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePeer indicates an expected call of RemovePeer.
func (mr *MockPeerManagerMockRecorder) RemovePeer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePeer", reflect.TypeOf((*MockPeerManager)(nil).RemovePeer), arg0, arg1, arg2)
}

// UpdatePeerStats mocks base method.
func (m *MockPeerManager) UpdatePeerStats(arg0 context.Context, arg1, arg2 string, arg3 *ports.PeerStats) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePeerStats", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePeerStats indicates an expected call of UpdatePeerStats.
func (mr *MockPeerManagerMockRecorder) UpdatePeerStats(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePeerStats", reflect.TypeOf((*MockPeerManager)(nil).UpdatePeerStats), arg0, arg1, arg2, arg3)
}
