// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/par1ram/silence/rpc/server-manager/internal/ports (interfaces: ServerRepository,StatsRepository,HealthRepository,ScalingRepository,BackupRepository,UpdateRepository)

// Package services_test is a generated GoMock package.
package services_test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/par1ram/silence/rpc/server-manager/internal/domain"
)

// MockServerRepository is a mock of ServerRepository interface.
type MockServerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockServerRepositoryMockRecorder
}

// MockServerRepositoryMockRecorder is the mock recorder for MockServerRepository.
type MockServerRepositoryMockRecorder struct {
	mock *MockServerRepository
}

// NewMockServerRepository creates a new mock instance.
func NewMockServerRepository(ctrl *gomock.Controller) *MockServerRepository {
	mock := &MockServerRepository{ctrl: ctrl}
	mock.recorder = &MockServerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerRepository) EXPECT() *MockServerRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockServerRepository) Create(arg0 context.Context, arg1 *domain.Server) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockServerRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockServerRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockServerRepository) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockServerRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockServerRepository)(nil).Delete), arg0, arg1)
}

// GetByID mocks base method.
func (m *MockServerRepository) GetByID(arg0 context.Context, arg1 string) (*domain.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*domain.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockServerRepositoryMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockServerRepository)(nil).GetByID), arg0, arg1)
}

// GetByRegion mocks base method.
func (m *MockServerRepository) GetByRegion(arg0 context.Context, arg1 string) ([]*domain.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByRegion", arg0, arg1)
	ret0, _ := ret[0].([]*domain.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByRegion indicates an expected call of GetByRegion.
func (mr *MockServerRepositoryMockRecorder) GetByRegion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByRegion", reflect.TypeOf((*MockServerRepository)(nil).GetByRegion), arg0, arg1)
}

// GetByStatus mocks base method.
func (m *MockServerRepository) GetByStatus(arg0 context.Context, arg1 domain.ServerStatus) ([]*domain.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStatus", arg0, arg1)
	ret0, _ := ret[0].([]*domain.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStatus indicates an expected call of GetByStatus.
func (mr *MockServerRepositoryMockRecorder) GetByStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStatus", reflect.TypeOf((*MockServerRepository)(nil).GetByStatus), arg0, arg1)
}

// GetByType mocks base method.
func (m *MockServerRepository) GetByType(arg0 context.Context, arg1 domain.ServerType) ([]*domain.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByType", arg0, arg1)
	ret0, _ := ret[0].([]*domain.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByType indicates an expected call of GetByType.
func (mr *MockServerRepositoryMockRecorder) GetByType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByType", reflect.TypeOf((*MockServerRepository)(nil).GetByType), arg0, arg1)
}

// List mocks base method.
func (m *MockServerRepository) List(arg0 context.Context, arg1 map[string]interface{}) ([]*domain.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*domain.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockServerRepositoryMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockServerRepository)(nil).List), arg0, arg1)
}

// Update mocks base method.
func (m *MockServerRepository) Update(arg0 context.Context, arg1 *domain.Server) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockServerRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockServerRepository)(nil).Update), arg0, arg1)
}

// MockStatsRepository is a mock of StatsRepository interface.
type MockStatsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStatsRepositoryMockRecorder
}

// MockStatsRepositoryMockRecorder is the mock recorder for MockStatsRepository.
type MockStatsRepositoryMockRecorder struct {
	mock *MockStatsRepository
}

// NewMockStatsRepository creates a new mock instance.
func NewMockStatsRepository(ctrl *gomock.Controller) *MockStatsRepository {
	mock := &MockStatsRepository{ctrl: ctrl}
	mock.recorder = &MockStatsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatsRepository) EXPECT() *MockStatsRepositoryMockRecorder {
	return m.recorder
}

// GetAggregatedStats mocks base method.
func (m *MockStatsRepository) GetAggregatedStats(arg0 context.Context, arg1, arg2 string) (*domain.ServerStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAggregatedStats", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.ServerStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAggregatedStats indicates an expected call of GetAggregatedStats.
func (mr *MockStatsRepositoryMockRecorder) GetAggregatedStats(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAggregatedStats", reflect.TypeOf((*MockStatsRepository)(nil).GetAggregatedStats), arg0, arg1, arg2)
}

// GetLatestStats mocks base method.
func (m *MockStatsRepository) GetLatestStats(arg0 context.Context, arg1 string) (*domain.ServerStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestStats", arg0, arg1)
	ret0, _ := ret[0].(*domain.ServerStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestStats indicates an expected call of GetLatestStats.
func (mr *MockStatsRepositoryMockRecorder) GetLatestStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestStats", reflect.TypeOf((*MockStatsRepository)(nil).GetLatestStats), arg0, arg1)
}

// GetStats mocks base method.
func (m *MockStatsRepository) GetStats(arg0 context.Context, arg1 string, arg2 int) ([]*domain.ServerStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*domain.ServerStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats.
func (mr *MockStatsRepositoryMockRecorder) GetStats(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockStatsRepository)(nil).GetStats), arg0, arg1, arg2)
}

// SaveStats mocks base method.
func (m *MockStatsRepository) SaveStats(arg0 context.Context, arg1 *domain.ServerStats) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveStats", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveStats indicates an expected call of SaveStats.
func (mr *MockStatsRepositoryMockRecorder) SaveStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveStats", reflect.TypeOf((*MockStatsRepository)(nil).SaveStats), arg0, arg1)
}

// MockHealthRepository is a mock of HealthRepository interface.
type MockHealthRepository struct {
	ctrl     *gomock.Controller
	recorder *MockHealthRepositoryMockRecorder
}

// MockHealthRepositoryMockRecorder is the mock recorder for MockHealthRepository.
type MockHealthRepositoryMockRecorder struct {
	mock *MockHealthRepository
}

// NewMockHealthRepository creates a new mock instance.
func NewMockHealthRepository(ctrl *gomock.Controller) *MockHealthRepository {
	mock := &MockHealthRepository{ctrl: ctrl}
	mock.recorder = &MockHealthRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthRepository) EXPECT() *MockHealthRepositoryMockRecorder {
	return m.recorder
}

// GetAllHealth mocks base method.
func (m *MockHealthRepository) GetAllHealth(arg0 context.Context) ([]*domain.ServerHealth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllHealth", arg0)
	ret0, _ := ret[0].([]*domain.ServerHealth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllHealth indicates an expected call of GetAllHealth.
func (mr *MockHealthRepositoryMockRecorder) GetAllHealth(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllHealth", reflect.TypeOf((*MockHealthRepository)(nil).GetAllHealth), arg0)
}

// GetHealth mocks base method.
func (m *MockHealthRepository) GetHealth(arg0 context.Context, arg1 string) (*domain.ServerHealth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHealth", arg0, arg1)
	ret0, _ := ret[0].(*domain.ServerHealth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHealth indicates an expected call of GetHealth.
func (mr *MockHealthRepositoryMockRecorder) GetHealth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHealth", reflect.TypeOf((*MockHealthRepository)(nil).GetHealth), arg0, arg1)
}

// GetHealthHistory mocks base method.
func (m *MockHealthRepository) GetHealthHistory(arg0 context.Context, arg1 string, arg2 int) ([]*domain.ServerHealth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHealthHistory", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*domain.ServerHealth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHealthHistory indicates an expected call of GetHealthHistory.
func (mr *MockHealthRepositoryMockRecorder) GetHealthHistory(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHealthHistory", reflect.TypeOf((*MockHealthRepository)(nil).GetHealthHistory), arg0, arg1, arg2)
}

// SaveHealth mocks base method.
func (m *MockHealthRepository) SaveHealth(arg0 context.Context, arg1 *domain.ServerHealth) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveHealth", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveHealth indicates an expected call of SaveHealth.
func (mr *MockHealthRepositoryMockRecorder) SaveHealth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveHealth", reflect.TypeOf((*MockHealthRepository)(nil).SaveHealth), arg0, arg1)
}

// MockScalingRepository is a mock of ScalingRepository interface.
type MockScalingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockScalingRepositoryMockRecorder
}

// MockScalingRepositoryMockRecorder is the mock recorder for MockScalingRepository.
type MockScalingRepositoryMockRecorder struct {
	mock *MockScalingRepository
}

// NewMockScalingRepository creates a new mock instance.
func NewMockScalingRepository(ctrl *gomock.Controller) *MockScalingRepository {
	mock := &MockScalingRepository{ctrl: ctrl}
	mock.recorder = &MockScalingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScalingRepository) EXPECT() *MockScalingRepositoryMockRecorder {
	return m.recorder
}

// DeletePolicy mocks base method.
func (m *MockScalingRepository) DeletePolicy(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePolicy", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePolicy indicates an expected call of DeletePolicy.
func (mr *MockScalingRepositoryMockRecorder) DeletePolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicy", reflect.TypeOf((*MockScalingRepository)(nil).DeletePolicy), arg0, arg1)
}

// GetPolicy mocks base method.
func (m *MockScalingRepository) GetPolicy(arg0 context.Context, arg1 string) (*domain.ScalingPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicy", arg0, arg1)
	ret0, _ := ret[0].(*domain.ScalingPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicy indicates an expected call of GetPolicy.
func (mr *MockScalingRepositoryMockRecorder) GetPolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicy", reflect.TypeOf((*MockScalingRepository)(nil).GetPolicy), arg0, arg1)
}

// ListPolicies mocks base method.
func (m *MockScalingRepository) ListPolicies(arg0 context.Context) ([]*domain.ScalingPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPolicies", arg0)
	ret0, _ := ret[0].([]*domain.ScalingPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPolicies indicates an expected call of ListPolicies.
func (mr *MockScalingRepositoryMockRecorder) ListPolicies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPolicies", reflect.TypeOf((*MockScalingRepository)(nil).ListPolicies), arg0)
}

// SavePolicy mocks base method.
func (m *MockScalingRepository) SavePolicy(arg0 context.Context, arg1 *domain.ScalingPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePolicy", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePolicy indicates an expected call of SavePolicy.
func (mr *MockScalingRepositoryMockRecorder) SavePolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePolicy", reflect.TypeOf((*MockScalingRepository)(nil).SavePolicy), arg0, arg1)
}

// UpdatePolicy mocks base method.
func (m *MockScalingRepository) UpdatePolicy(arg0 context.Context, arg1 *domain.ScalingPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePolicy", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePolicy indicates an expected call of UpdatePolicy.
func (mr *MockScalingRepositoryMockRecorder) UpdatePolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePolicy", reflect.TypeOf((*MockScalingRepository)(nil).UpdatePolicy), arg0, arg1)
}

// MockBackupRepository is a mock of BackupRepository interface.
type MockBackupRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBackupRepositoryMockRecorder
}

// MockBackupRepositoryMockRecorder is the mock recorder for MockBackupRepository.
type MockBackupRepositoryMockRecorder struct {
	mock *MockBackupRepository
}

// NewMockBackupRepository creates a new mock instance.
func NewMockBackupRepository(ctrl *gomock.Controller) *MockBackupRepository {
	mock := &MockBackupRepository{ctrl: ctrl}
	mock.recorder = &MockBackupRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackupRepository) EXPECT() *MockBackupRepositoryMockRecorder {
	return m.recorder
}

// DeleteBackup mocks base method.
func (m *MockBackupRepository) DeleteBackup(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBackup indicates an expected call of DeleteBackup.
func (mr *MockBackupRepositoryMockRecorder) DeleteBackup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackup", reflect.TypeOf((*MockBackupRepository)(nil).DeleteBackup), arg0, arg1)
}

// DeleteConfig mocks base method.
func (m *MockBackupRepository) DeleteConfig(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfig", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteConfig indicates an expected call of DeleteConfig.
func (mr *MockBackupRepositoryMockRecorder) DeleteConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfig", reflect.TypeOf((*MockBackupRepository)(nil).DeleteConfig), arg0, arg1)
}

// GetBackups mocks base method.
func (m *MockBackupRepository) GetBackups(arg0 context.Context, arg1 string) ([]map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackups", arg0, arg1)
	ret0, _ := ret[0].([]map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackups indicates an expected call of GetBackups.
func (mr *MockBackupRepositoryMockRecorder) GetBackups(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackups", reflect.TypeOf((*MockBackupRepository)(nil).GetBackups), arg0, arg1)
}

// GetConfig mocks base method.
func (m *MockBackupRepository) GetConfig(arg0 context.Context, arg1 string) (*domain.BackupConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig", arg0, arg1)
	ret0, _ := ret[0].(*domain.BackupConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockBackupRepositoryMockRecorder) GetConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockBackupRepository)(nil).GetConfig), arg0, arg1)
}

// ListConfigs mocks base method.
func (m *MockBackupRepository) ListConfigs(arg0 context.Context) ([]*domain.BackupConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConfigs", arg0)
	ret0, _ := ret[0].([]*domain.BackupConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConfigs indicates an expected call of ListConfigs.
func (mr *MockBackupRepositoryMockRecorder) ListConfigs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfigs", reflect.TypeOf((*MockBackupRepository)(nil).ListConfigs), arg0)
}

// SaveBackup mocks base method.
func (m *MockBackupRepository) SaveBackup(arg0 context.Context, arg1, arg2 string, arg3 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBackup", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBackup indicates an expected call of SaveBackup.
func (mr *MockBackupRepositoryMockRecorder) SaveBackup(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBackup", reflect.TypeOf((*MockBackupRepository)(nil).SaveBackup), arg0, arg1, arg2, arg3)
}

// SaveConfig mocks base method.
func (m *MockBackupRepository) SaveConfig(arg0 context.Context, arg1 *domain.BackupConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveConfig", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveConfig indicates an expected call of SaveConfig.
func (mr *MockBackupRepositoryMockRecorder) SaveConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveConfig", reflect.TypeOf((*MockBackupRepository)(nil).SaveConfig), arg0, arg1)
}

// UpdateConfig mocks base method.
func (m *MockBackupRepository) UpdateConfig(arg0 context.Context, arg1 *domain.BackupConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfig", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateConfig indicates an expected call of UpdateConfig.
func (mr *MockBackupRepositoryMockRecorder) UpdateConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfig", reflect.TypeOf((*MockBackupRepository)(nil).UpdateConfig), arg0, arg1)
}

// MockUpdateRepository is a mock of UpdateRepository interface.
type MockUpdateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateRepositoryMockRecorder
}

// MockUpdateRepositoryMockRecorder is the mock recorder for MockUpdateRepository.
type MockUpdateRepositoryMockRecorder struct {
	mock *MockUpdateRepository
}

// NewMockUpdateRepository creates a new mock instance.
func NewMockUpdateRepository(ctrl *gomock.Controller) *MockUpdateRepository {
	mock := &MockUpdateRepository{ctrl: ctrl}
	mock.recorder = &MockUpdateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateRepository) EXPECT() *MockUpdateRepositoryMockRecorder {
	return m.recorder
}

// CompleteUpdate mocks base method.
func (m *MockUpdateRepository) CompleteUpdate(arg0 context.Context, arg1 string, arg2 bool, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteUpdate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteUpdate indicates an expected call of CompleteUpdate.
func (mr *MockUpdateRepositoryMockRecorder) CompleteUpdate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteUpdate", reflect.TypeOf((*MockUpdateRepository)(nil).CompleteUpdate), arg0, arg1, arg2, arg3)
}

// GetUpdateStatus mocks base method.
func (m *MockUpdateRepository) GetUpdateStatus(arg0 context.Context, arg1 string) (*domain.UpdateStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdateStatus", arg0, arg1)
	ret0, _ := ret[0].(*domain.UpdateStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpdateStatus indicates an expected call of GetUpdateStatus.
func (mr *MockUpdateRepositoryMockRecorder) GetUpdateStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdateStatus", reflect.TypeOf((*MockUpdateRepository)(nil).GetUpdateStatus), arg0, arg1)
}

// SaveUpdateStatus mocks base method.
func (m *MockUpdateRepository) SaveUpdateStatus(arg0 context.Context, arg1 *domain.UpdateStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUpdateStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUpdateStatus indicates an expected call of SaveUpdateStatus.
func (mr *MockUpdateRepositoryMockRecorder) SaveUpdateStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUpdateStatus", reflect.TypeOf((*MockUpdateRepository)(nil).SaveUpdateStatus), arg0, arg1)
}

// UpdateProgress mocks base method.
func (m *MockUpdateRepository) UpdateProgress(arg0 context.Context, arg1 string, arg2 int, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProgress", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProgress indicates an expected call of UpdateProgress.
func (mr *MockUpdateRepositoryMockRecorder) UpdateProgress(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProgress", reflect.TypeOf((*MockUpdateRepository)(nil).UpdateProgress), arg0, arg1, arg2, arg3)
}
