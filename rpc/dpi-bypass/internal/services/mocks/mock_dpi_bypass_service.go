// Code generated by MockGen. DO NOT EDIT.
// Source: internal/ports/bypass.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/par1ram/silence/rpc/dpi-bypass/internal/domain"
)

// MockDPIBypassService is a mock of DPIBypassService interface.
type MockDPIBypassService struct {
	ctrl     *gomock.Controller
	recorder *MockDPIBypassServiceMockRecorder
}

// MockDPIBypassServiceMockRecorder is the mock recorder for MockDPIBypassService.
type MockDPIBypassServiceMockRecorder struct {
	mock *MockDPIBypassService
}

// NewMockDPIBypassService creates a new mock instance.
func NewMockDPIBypassService(ctrl *gomock.Controller) *MockDPIBypassService {
	mock := &MockDPIBypassService{ctrl: ctrl}
	mock.recorder = &MockDPIBypassServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDPIBypassService) EXPECT() *MockDPIBypassServiceMockRecorder {
	return m.recorder
}

// AddBypassRule mocks base method.
func (m *MockDPIBypassService) AddBypassRule(ctx context.Context, req *domain.AddBypassRuleRequest) (*domain.BypassRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBypassRule", ctx, req)
	ret0, _ := ret[0].(*domain.BypassRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBypassRule indicates an expected call of AddBypassRule.
func (mr *MockDPIBypassServiceMockRecorder) AddBypassRule(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBypassRule", reflect.TypeOf((*MockDPIBypassService)(nil).AddBypassRule), ctx, req)
}

// CreateBypassConfig mocks base method.
func (m *MockDPIBypassService) CreateBypassConfig(ctx context.Context, req *domain.CreateBypassConfigRequest) (*domain.BypassConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBypassConfig", ctx, req)
	ret0, _ := ret[0].(*domain.BypassConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBypassConfig indicates an expected call of CreateBypassConfig.
func (mr *MockDPIBypassServiceMockRecorder) CreateBypassConfig(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBypassConfig", reflect.TypeOf((*MockDPIBypassService)(nil).CreateBypassConfig), ctx, req)
}

// DeleteBypassConfig mocks base method.
func (m *MockDPIBypassService) DeleteBypassConfig(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBypassConfig", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBypassConfig indicates an expected call of DeleteBypassConfig.
func (mr *MockDPIBypassServiceMockRecorder) DeleteBypassConfig(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBypassConfig", reflect.TypeOf((*MockDPIBypassService)(nil).DeleteBypassConfig), ctx, id)
}

// DeleteBypassRule mocks base method.
func (m *MockDPIBypassService) DeleteBypassRule(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBypassRule", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBypassRule indicates an expected call of DeleteBypassRule.
func (mr *MockDPIBypassServiceMockRecorder) DeleteBypassRule(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBypassRule", reflect.TypeOf((*MockDPIBypassService)(nil).DeleteBypassRule), ctx, id)
}

// GetBypassConfig mocks base method.
func (m *MockDPIBypassService) GetBypassConfig(ctx context.Context, id string) (*domain.BypassConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBypassConfig", ctx, id)
	ret0, _ := ret[0].(*domain.BypassConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBypassConfig indicates an expected call of GetBypassConfig.
func (mr *MockDPIBypassServiceMockRecorder) GetBypassConfig(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBypassConfig", reflect.TypeOf((*MockDPIBypassService)(nil).GetBypassConfig), ctx, id)
}

// GetBypassHistory mocks base method.
func (m *MockDPIBypassService) GetBypassHistory(ctx context.Context, req *domain.BypassHistoryRequest) ([]*domain.BypassHistoryEntry, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBypassHistory", ctx, req)
	ret0, _ := ret[0].([]*domain.BypassHistoryEntry)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBypassHistory indicates an expected call of GetBypassHistory.
func (mr *MockDPIBypassServiceMockRecorder) GetBypassHistory(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBypassHistory", reflect.TypeOf((*MockDPIBypassService)(nil).GetBypassHistory), ctx, req)
}

// GetBypassStats mocks base method.
func (m *MockDPIBypassService) GetBypassStats(ctx context.Context, sessionID string) (*domain.BypassStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBypassStats", ctx, sessionID)
	ret0, _ := ret[0].(*domain.BypassStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBypassStats indicates an expected call of GetBypassStats.
func (mr *MockDPIBypassServiceMockRecorder) GetBypassStats(ctx, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBypassStats", reflect.TypeOf((*MockDPIBypassService)(nil).GetBypassStats), ctx, sessionID)
}

// GetBypassStatus mocks base method.
func (m *MockDPIBypassService) GetBypassStatus(ctx context.Context, sessionID string) (*domain.BypassSessionStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBypassStatus", ctx, sessionID)
	ret0, _ := ret[0].(*domain.BypassSessionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBypassStatus indicates an expected call of GetBypassStatus.
func (mr *MockDPIBypassServiceMockRecorder) GetBypassStatus(ctx, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBypassStatus", reflect.TypeOf((*MockDPIBypassService)(nil).GetBypassStatus), ctx, sessionID)
}

// ListBypassConfigs mocks base method.
func (m *MockDPIBypassService) ListBypassConfigs(ctx context.Context, filters *domain.BypassConfigFilters) ([]*domain.BypassConfig, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBypassConfigs", ctx, filters)
	ret0, _ := ret[0].([]*domain.BypassConfig)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListBypassConfigs indicates an expected call of ListBypassConfigs.
func (mr *MockDPIBypassServiceMockRecorder) ListBypassConfigs(ctx, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBypassConfigs", reflect.TypeOf((*MockDPIBypassService)(nil).ListBypassConfigs), ctx, filters)
}

// ListBypassRules mocks base method.
func (m *MockDPIBypassService) ListBypassRules(ctx context.Context, filters *domain.BypassRuleFilters) ([]*domain.BypassRule, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBypassRules", ctx, filters)
	ret0, _ := ret[0].([]*domain.BypassRule)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListBypassRules indicates an expected call of ListBypassRules.
func (mr *MockDPIBypassServiceMockRecorder) ListBypassRules(ctx, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBypassRules", reflect.TypeOf((*MockDPIBypassService)(nil).ListBypassRules), ctx, filters)
}

// StartBypass mocks base method.
func (m *MockDPIBypassService) StartBypass(ctx context.Context, req *domain.StartBypassRequest) (*domain.BypassSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartBypass", ctx, req)
	ret0, _ := ret[0].(*domain.BypassSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartBypass indicates an expected call of StartBypass.
func (mr *MockDPIBypassServiceMockRecorder) StartBypass(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBypass", reflect.TypeOf((*MockDPIBypassService)(nil).StartBypass), ctx, req)
}

// StopBypass mocks base method.
func (m *MockDPIBypassService) StopBypass(ctx context.Context, sessionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopBypass", ctx, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopBypass indicates an expected call of StopBypass.
func (mr *MockDPIBypassServiceMockRecorder) StopBypass(ctx, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopBypass", reflect.TypeOf((*MockDPIBypassService)(nil).StopBypass), ctx, sessionID)
}

// UpdateBypassConfig mocks base method.
func (m *MockDPIBypassService) UpdateBypassConfig(ctx context.Context, req *domain.UpdateBypassConfigRequest) (*domain.BypassConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBypassConfig", ctx, req)
	ret0, _ := ret[0].(*domain.BypassConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBypassConfig indicates an expected call of UpdateBypassConfig.
func (mr *MockDPIBypassServiceMockRecorder) UpdateBypassConfig(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBypassConfig", reflect.TypeOf((*MockDPIBypassService)(nil).UpdateBypassConfig), ctx, req)
}

// UpdateBypassRule mocks base method.
func (m *MockDPIBypassService) UpdateBypassRule(ctx context.Context, req *domain.UpdateBypassRuleRequest) (*domain.BypassRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBypassRule", ctx, req)
	ret0, _ := ret[0].(*domain.BypassRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBypassRule indicates an expected call of UpdateBypassRule.
func (mr *MockDPIBypassServiceMockRecorder) UpdateBypassRule(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBypassRule", reflect.TypeOf((*MockDPIBypassService)(nil).UpdateBypassRule), ctx, req)
}
