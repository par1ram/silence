// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/par1ram/silence/rpc/dpi-bypass/internal/ports (interfaces: BypassAdapter)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/par1ram/silence/rpc/dpi-bypass/internal/domain"
)

// MockBypassAdapter is a mock of BypassAdapter interface.
type MockBypassAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockBypassAdapterMockRecorder
}

// MockBypassAdapterMockRecorder is the mock recorder for MockBypassAdapter.
type MockBypassAdapterMockRecorder struct {
	mock *MockBypassAdapter
}

// NewMockBypassAdapter creates a new mock instance.
func NewMockBypassAdapter(ctrl *gomock.Controller) *MockBypassAdapter {
	mock := &MockBypassAdapter{ctrl: ctrl}
	mock.recorder = &MockBypassAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBypassAdapter) EXPECT() *MockBypassAdapterMockRecorder {
	return m.recorder
}

// GetStats mocks base method.
func (m *MockBypassAdapter) GetStats(arg0 string) (*domain.BypassStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats", arg0)
	ret0, _ := ret[0].(*domain.BypassStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats.
func (mr *MockBypassAdapterMockRecorder) GetStats(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockBypassAdapter)(nil).GetStats), arg0)
}

// IsRunning mocks base method.
func (m *MockBypassAdapter) IsRunning(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRunning", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRunning indicates an expected call of IsRunning.
func (mr *MockBypassAdapterMockRecorder) IsRunning(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRunning", reflect.TypeOf((*MockBypassAdapter)(nil).IsRunning), arg0)
}

// Start mocks base method.
func (m *MockBypassAdapter) Start(arg0 *domain.BypassConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockBypassAdapterMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockBypassAdapter)(nil).Start), arg0)
}

// Stop mocks base method.
func (m *MockBypassAdapter) Stop(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockBypassAdapterMockRecorder) Stop(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockBypassAdapter)(nil).Stop), arg0)
}
