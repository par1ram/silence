services:
  # =============================================================================
  # INFRASTRUCTURE SERVICES
  # =============================================================================

  postgres:
    image: postgres:15
    container_name: silence_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-silence_auth}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployments/docker/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - silence_network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: silence_redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - silence_network
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: silence_rabbitmq
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS:-admin}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - silence_network
    restart: unless-stopped

  influxdb:
    image: influxdb:2.7-alpine
    container_name: silence_influxdb
    environment:
      DOCKER_INFLUXDB_INIT_MODE: ${DOCKER_INFLUXDB_INIT_MODE:-setup}
      DOCKER_INFLUXDB_INIT_USERNAME: ${DOCKER_INFLUXDB_INIT_USERNAME:-admin}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${DOCKER_INFLUXDB_INIT_PASSWORD:-adminpassword}
      DOCKER_INFLUXDB_INIT_ORG: ${DOCKER_INFLUXDB_INIT_ORG:-silence}
      DOCKER_INFLUXDB_INIT_BUCKET: ${DOCKER_INFLUXDB_INIT_BUCKET:-analytics}
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${DOCKER_INFLUXDB_INIT_ADMIN_TOKEN:-your-influxdb-token}
    ports:
      - "${INFLUXDB_PORT:-8086}:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
    healthcheck:
      test: ["CMD", "influx", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - silence_network
    restart: unless-stopped

  clickhouse:
    image: clickhouse/clickhouse-server:24.1-alpine
    container_name: silence_clickhouse
    environment:
      CLICKHOUSE_DB: ${CLICKHOUSE_DB:-silence_analytics}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-admin}
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: ${CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT:-1}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-password}
    ports:
      - "${CLICKHOUSE_HTTP_PORT:-8123}:8123"
      - "${CLICKHOUSE_NATIVE_PORT:-9000}:9000"
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./deployments/docker/clickhouse/init.sql:/docker-entrypoint-initdb.d/init.sql

    networks:
      - silence_network
    restart: unless-stopped

  # =============================================================================
  # APPLICATION SERVICES
  # =============================================================================

  auth:
    build:
      context: .
      dockerfile: api/auth/Dockerfile
    container_name: silence_auth
    ports:
      - "${AUTH_HTTP_PORT:-8081}:8080"
      - "${AUTH_GRPC_PORT:-9081}:9080"
    environment:
      HTTP_PORT: 8080
      GRPC_PORT: 9080
      DB_HOST: postgres
      DB_PORT: ${DB_PORT:-5432}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-password}
      DB_NAME: ${POSTGRES_DB:-silence_auth}
      DB_SSLMODE: ${DB_SSLMODE:-disable}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      JWT_SECRET: ${JWT_SECRET:-your-jwt-secret-key-change-this-in-production}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-24h}
      JWT_REFRESH_EXPIRATION: ${JWT_REFRESH_EXPIRATION:-168h}
      BCRYPT_COST: ${BCRYPT_COST:-12}
      INTERNAL_API_TOKEN: ${INTERNAL_API_TOKEN:-super-secret-internal-token}
      RATE_LIMIT_REQUESTS: ${RATE_LIMIT_REQUESTS:-100}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-1m}
      MIGRATIONS_DIR: ${AUTH_MIGRATIONS_DIR:-/app/migrations}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      VERSION: 1.0.0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - silence_network
    restart: unless-stopped

  gateway:
    build:
      context: .
      dockerfile: api/gateway/Dockerfile
    container_name: silence_gateway
    ports:
      - "${GATEWAY_HTTP_PORT:-8080}:8080"
    environment:
      HTTP_PORT: 8080
      AUTH_SERVICE_URL: ${GATEWAY_AUTH_SERVICE_URL:-http://auth:8080}
      AUTH_GRPC_SERVICE_URL: ${GATEWAY_AUTH_GRPC_SERVICE_URL:-auth:9080}
      ANALYTICS_SERVICE_URL: ${GATEWAY_ANALYTICS_SERVICE_URL:-analytics:8080}
      SERVER_MANAGER_SERVICE_URL: ${GATEWAY_SERVER_MANAGER_SERVICE_URL:-server-manager:8085}
      DPI_BYPASS_SERVICE_URL: ${GATEWAY_DPI_BYPASS_SERVICE_URL:-dpi-bypass:8080}
      VPN_CORE_SERVICE_URL: ${GATEWAY_VPN_CORE_SERVICE_URL:-http://vpn-core:8080}
      NOTIFICATIONS_SERVICE_URL: ${GATEWAY_NOTIFICATIONS_SERVICE_URL:-notifications:8080}
      AUTH_URL: ${GATEWAY_AUTH_SERVICE_URL:-http://auth:8080}
      JWT_SECRET: ${JWT_SECRET:-your-jwt-secret-key-change-this-in-production}
      INTERNAL_API_TOKEN: ${INTERNAL_API_TOKEN:-super-secret-internal-token}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    depends_on:
      auth:
        condition: service_started
      analytics:
        condition: service_started
      server-manager:
        condition: service_started
    networks:
      - silence_network
    restart: unless-stopped

  analytics:
    build:
      context: .
      dockerfile: rpc/analytics/Dockerfile
    container_name: silence_analytics
    ports:
      - "${ANALYTICS_GRPC_PORT:-8082}:8080"
    environment:
      GRPC_PORT: 8080
      REDIS_ADDRESS: ${ANALYTICS_REDIS_ADDRESS:-redis:6379}
      REDIS_PASSWORD: ${ANALYTICS_REDIS_PASSWORD:-}
      REDIS_DB: ${ANALYTICS_REDIS_DB:-0}
      INFLUXDB_URL: ${ANALYTICS_INFLUXDB_URL:-http://influxdb:8086}
      ANALYTICS_INFLUXDB_TOKEN: ${ANALYTICS_INFLUXDB_TOKEN:-your-influxdb-token}
      ANALYTICS_INFLUXDB_ORG: ${ANALYTICS_INFLUXDB_ORG:-silence}
      ANALYTICS_INFLUXDB_BUCKET: ${ANALYTICS_INFLUXDB_BUCKET:-analytics}
      CLICKHOUSE_HOST: ${ANALYTICS_CLICKHOUSE_HOST:-clickhouse}
      CLICKHOUSE_PORT: ${ANALYTICS_CLICKHOUSE_PORT:-9000}
      CLICKHOUSE_DB: ${ANALYTICS_CLICKHOUSE_DB:-silence_analytics}
      CLICKHOUSE_USER: ${ANALYTICS_CLICKHOUSE_USER:-admin}
      CLICKHOUSE_PASSWORD: ${ANALYTICS_CLICKHOUSE_PASSWORD:-password}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    depends_on:
      influxdb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - silence_network
    restart: unless-stopped

  server-manager:
    build:
      context: .
      dockerfile: rpc/server-manager/Dockerfile
    container_name: silence_server_manager
    ports:
      - "${SERVER_MANAGER_GRPC_PORT:-8085}:8085"
    environment:
      GRPC_PORT: 8085
      DB_HOST: postgres
      DB_PORT: ${DB_PORT:-5432}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-password}
      DB_NAME: ${SERVER_MANAGER_DB_NAME:-silence_server_manager}
      DB_SSLMODE: ${DB_SSLMODE:-disable}
      DOCKER_HOST: ${SERVER_MANAGER_DOCKER_HOST:-unix:///var/run/docker.sock}
      DOCKER_API_VERSION: ${SERVER_MANAGER_DOCKER_API_VERSION:-1.41}
      DOCKER_TIMEOUT: ${SERVER_MANAGER_DOCKER_TIMEOUT:-30s}
      MIGRATIONS_DIR: ${SERVER_MANAGER_MIGRATIONS_DIR:-/app/migrations}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - silence_network
    restart: unless-stopped

  dpi-bypass:
    build:
      context: .
      dockerfile: rpc/dpi-bypass/Dockerfile
    container_name: silence_dpi_bypass
    ports:
      - "${DPI_BYPASS_GRPC_PORT:-8083}:8080"
    environment:
      GRPC_PORT: 8080
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - silence_network
    restart: unless-stopped

  vpn-core:
    build:
      context: .
      dockerfile: rpc/vpn-core/Dockerfile
    container_name: silence_vpn_core
    ports:
      - "${VPN_CORE_HTTP_PORT:-8084}:8080"
    environment:
      HTTP_PORT: 8080
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      DB_HOST: postgres
      DB_PORT: ${DB_PORT:-5432}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-password}
      DB_NAME: ${VPN_CORE_DB_NAME:-silence_vpn}
      DB_SSLMODE: ${DB_SSLMODE:-disable}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - silence_network
    restart: unless-stopped

  notifications:
    build:
      context: .
      dockerfile: rpc/notifications/Dockerfile
    container_name: silence_notifications
    ports:
      - "${NOTIFICATIONS_GRPC_PORT:-8087}:8080"
    environment:
      GRPC_PORT: 8080
      NOTIFICATIONS_RABBITMQ_URL: ${NOTIFICATIONS_RABBITMQ_URL:-amqp://admin:admin@rabbitmq:5672/}
      NOTIFICATIONS_RABBITMQ_EXCHANGE: ${NOTIFICATIONS_RABBITMQ_EXCHANGE:-notifications}
      NOTIFICATIONS_RABBITMQ_QUEUE: ${NOTIFICATIONS_RABBITMQ_QUEUE:-notifications_queue}
      NOTIFICATIONS_RABBITMQ_ROUTING_KEY: ${NOTIFICATIONS_RABBITMQ_ROUTING_KEY:-notifications.*}
      NOTIFICATIONS_RABBITMQ_CONSUMER_TAG: ${NOTIFICATIONS_RABBITMQ_CONSUMER_TAG:-notifications_consumer}
      NOTIFICATIONS_RABBITMQ_PREFETCH_COUNT: ${NOTIFICATIONS_RABBITMQ_PREFETCH_COUNT:-10}
      NOTIFICATIONS_ANALYTICS_URL: ${NOTIFICATIONS_ANALYTICS_URL:-http://analytics:8080}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    depends_on:
      rabbitmq:
        condition: service_healthy
      analytics:
        condition: service_started
    networks:
      - silence_network
    restart: unless-stopped

# =============================================================================
# VOLUMES
# =============================================================================

volumes:
  postgres_data:
    name: ${POSTGRES_VOLUME:-postgres_data}
  redis_data:
    name: ${REDIS_VOLUME:-redis_data}
  rabbitmq_data:
    name: ${RABBITMQ_VOLUME:-rabbitmq_data}
  influxdb_data:
    name: ${INFLUXDB_VOLUME:-influxdb_data}
  clickhouse_data:
    name: ${CLICKHOUSE_VOLUME:-clickhouse_data}

# =============================================================================
# NETWORKS
# =============================================================================

networks:
  silence_network:
    name: ${NETWORK_NAME:-silence_network}
    driver: bridge
