// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/proto/server-manager/server.proto

package server_manager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ServerManagerService_Health_FullMethodName               = "/server.ServerManagerService/Health"
	ServerManagerService_CreateServer_FullMethodName         = "/server.ServerManagerService/CreateServer"
	ServerManagerService_GetServer_FullMethodName            = "/server.ServerManagerService/GetServer"
	ServerManagerService_ListServers_FullMethodName          = "/server.ServerManagerService/ListServers"
	ServerManagerService_UpdateServer_FullMethodName         = "/server.ServerManagerService/UpdateServer"
	ServerManagerService_DeleteServer_FullMethodName         = "/server.ServerManagerService/DeleteServer"
	ServerManagerService_StartServer_FullMethodName          = "/server.ServerManagerService/StartServer"
	ServerManagerService_StopServer_FullMethodName           = "/server.ServerManagerService/StopServer"
	ServerManagerService_RestartServer_FullMethodName        = "/server.ServerManagerService/RestartServer"
	ServerManagerService_GetServerStats_FullMethodName       = "/server.ServerManagerService/GetServerStats"
	ServerManagerService_GetServerHealth_FullMethodName      = "/server.ServerManagerService/GetServerHealth"
	ServerManagerService_MonitorServer_FullMethodName        = "/server.ServerManagerService/MonitorServer"
	ServerManagerService_GetServersByType_FullMethodName     = "/server.ServerManagerService/GetServersByType"
	ServerManagerService_GetServersByRegion_FullMethodName   = "/server.ServerManagerService/GetServersByRegion"
	ServerManagerService_GetServersByStatus_FullMethodName   = "/server.ServerManagerService/GetServersByStatus"
	ServerManagerService_ScaleServer_FullMethodName          = "/server.ServerManagerService/ScaleServer"
	ServerManagerService_CreateBackup_FullMethodName         = "/server.ServerManagerService/CreateBackup"
	ServerManagerService_RestoreBackup_FullMethodName        = "/server.ServerManagerService/RestoreBackup"
	ServerManagerService_UpdateServerSoftware_FullMethodName = "/server.ServerManagerService/UpdateServerSoftware"
)

// ServerManagerServiceClient is the client API for ServerManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Server Manager Service
type ServerManagerServiceClient interface {
	// Health check
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
	// Server management
	CreateServer(ctx context.Context, in *CreateServerRequest, opts ...grpc.CallOption) (*Server, error)
	GetServer(ctx context.Context, in *GetServerRequest, opts ...grpc.CallOption) (*Server, error)
	ListServers(ctx context.Context, in *ListServersRequest, opts ...grpc.CallOption) (*ListServersResponse, error)
	UpdateServer(ctx context.Context, in *UpdateServerRequest, opts ...grpc.CallOption) (*Server, error)
	DeleteServer(ctx context.Context, in *DeleteServerRequest, opts ...grpc.CallOption) (*DeleteServerResponse, error)
	// Server operations
	StartServer(ctx context.Context, in *StartServerRequest, opts ...grpc.CallOption) (*StartServerResponse, error)
	StopServer(ctx context.Context, in *StopServerRequest, opts ...grpc.CallOption) (*StopServerResponse, error)
	RestartServer(ctx context.Context, in *RestartServerRequest, opts ...grpc.CallOption) (*RestartServerResponse, error)
	// Server monitoring
	GetServerStats(ctx context.Context, in *GetServerStatsRequest, opts ...grpc.CallOption) (*ServerStats, error)
	GetServerHealth(ctx context.Context, in *GetServerHealthRequest, opts ...grpc.CallOption) (*ServerHealth, error)
	MonitorServer(ctx context.Context, in *MonitorServerRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ServerMonitorEvent], error)
	// Server filtering
	GetServersByType(ctx context.Context, in *GetServersByTypeRequest, opts ...grpc.CallOption) (*GetServersByTypeResponse, error)
	GetServersByRegion(ctx context.Context, in *GetServersByRegionRequest, opts ...grpc.CallOption) (*GetServersByRegionResponse, error)
	GetServersByStatus(ctx context.Context, in *GetServersByStatusRequest, opts ...grpc.CallOption) (*GetServersByStatusResponse, error)
	// Scaling and management
	ScaleServer(ctx context.Context, in *ScaleServerRequest, opts ...grpc.CallOption) (*ScaleServerResponse, error)
	CreateBackup(ctx context.Context, in *CreateBackupRequest, opts ...grpc.CallOption) (*CreateBackupResponse, error)
	RestoreBackup(ctx context.Context, in *RestoreBackupRequest, opts ...grpc.CallOption) (*RestoreBackupResponse, error)
	UpdateServerSoftware(ctx context.Context, in *UpdateServerSoftwareRequest, opts ...grpc.CallOption) (*UpdateServerSoftwareResponse, error)
}

type serverManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServerManagerServiceClient(cc grpc.ClientConnInterface) ServerManagerServiceClient {
	return &serverManagerServiceClient{cc}
}

func (c *serverManagerServiceClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, ServerManagerService_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagerServiceClient) CreateServer(ctx context.Context, in *CreateServerRequest, opts ...grpc.CallOption) (*Server, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Server)
	err := c.cc.Invoke(ctx, ServerManagerService_CreateServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagerServiceClient) GetServer(ctx context.Context, in *GetServerRequest, opts ...grpc.CallOption) (*Server, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Server)
	err := c.cc.Invoke(ctx, ServerManagerService_GetServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagerServiceClient) ListServers(ctx context.Context, in *ListServersRequest, opts ...grpc.CallOption) (*ListServersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListServersResponse)
	err := c.cc.Invoke(ctx, ServerManagerService_ListServers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagerServiceClient) UpdateServer(ctx context.Context, in *UpdateServerRequest, opts ...grpc.CallOption) (*Server, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Server)
	err := c.cc.Invoke(ctx, ServerManagerService_UpdateServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagerServiceClient) DeleteServer(ctx context.Context, in *DeleteServerRequest, opts ...grpc.CallOption) (*DeleteServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteServerResponse)
	err := c.cc.Invoke(ctx, ServerManagerService_DeleteServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagerServiceClient) StartServer(ctx context.Context, in *StartServerRequest, opts ...grpc.CallOption) (*StartServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartServerResponse)
	err := c.cc.Invoke(ctx, ServerManagerService_StartServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagerServiceClient) StopServer(ctx context.Context, in *StopServerRequest, opts ...grpc.CallOption) (*StopServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopServerResponse)
	err := c.cc.Invoke(ctx, ServerManagerService_StopServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagerServiceClient) RestartServer(ctx context.Context, in *RestartServerRequest, opts ...grpc.CallOption) (*RestartServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestartServerResponse)
	err := c.cc.Invoke(ctx, ServerManagerService_RestartServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagerServiceClient) GetServerStats(ctx context.Context, in *GetServerStatsRequest, opts ...grpc.CallOption) (*ServerStats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServerStats)
	err := c.cc.Invoke(ctx, ServerManagerService_GetServerStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagerServiceClient) GetServerHealth(ctx context.Context, in *GetServerHealthRequest, opts ...grpc.CallOption) (*ServerHealth, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServerHealth)
	err := c.cc.Invoke(ctx, ServerManagerService_GetServerHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagerServiceClient) MonitorServer(ctx context.Context, in *MonitorServerRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ServerMonitorEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ServerManagerService_ServiceDesc.Streams[0], ServerManagerService_MonitorServer_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MonitorServerRequest, ServerMonitorEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ServerManagerService_MonitorServerClient = grpc.ServerStreamingClient[ServerMonitorEvent]

func (c *serverManagerServiceClient) GetServersByType(ctx context.Context, in *GetServersByTypeRequest, opts ...grpc.CallOption) (*GetServersByTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServersByTypeResponse)
	err := c.cc.Invoke(ctx, ServerManagerService_GetServersByType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagerServiceClient) GetServersByRegion(ctx context.Context, in *GetServersByRegionRequest, opts ...grpc.CallOption) (*GetServersByRegionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServersByRegionResponse)
	err := c.cc.Invoke(ctx, ServerManagerService_GetServersByRegion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagerServiceClient) GetServersByStatus(ctx context.Context, in *GetServersByStatusRequest, opts ...grpc.CallOption) (*GetServersByStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServersByStatusResponse)
	err := c.cc.Invoke(ctx, ServerManagerService_GetServersByStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagerServiceClient) ScaleServer(ctx context.Context, in *ScaleServerRequest, opts ...grpc.CallOption) (*ScaleServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScaleServerResponse)
	err := c.cc.Invoke(ctx, ServerManagerService_ScaleServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagerServiceClient) CreateBackup(ctx context.Context, in *CreateBackupRequest, opts ...grpc.CallOption) (*CreateBackupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBackupResponse)
	err := c.cc.Invoke(ctx, ServerManagerService_CreateBackup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagerServiceClient) RestoreBackup(ctx context.Context, in *RestoreBackupRequest, opts ...grpc.CallOption) (*RestoreBackupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestoreBackupResponse)
	err := c.cc.Invoke(ctx, ServerManagerService_RestoreBackup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagerServiceClient) UpdateServerSoftware(ctx context.Context, in *UpdateServerSoftwareRequest, opts ...grpc.CallOption) (*UpdateServerSoftwareResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateServerSoftwareResponse)
	err := c.cc.Invoke(ctx, ServerManagerService_UpdateServerSoftware_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerManagerServiceServer is the server API for ServerManagerService service.
// All implementations must embed UnimplementedServerManagerServiceServer
// for forward compatibility.
//
// Server Manager Service
type ServerManagerServiceServer interface {
	// Health check
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	// Server management
	CreateServer(context.Context, *CreateServerRequest) (*Server, error)
	GetServer(context.Context, *GetServerRequest) (*Server, error)
	ListServers(context.Context, *ListServersRequest) (*ListServersResponse, error)
	UpdateServer(context.Context, *UpdateServerRequest) (*Server, error)
	DeleteServer(context.Context, *DeleteServerRequest) (*DeleteServerResponse, error)
	// Server operations
	StartServer(context.Context, *StartServerRequest) (*StartServerResponse, error)
	StopServer(context.Context, *StopServerRequest) (*StopServerResponse, error)
	RestartServer(context.Context, *RestartServerRequest) (*RestartServerResponse, error)
	// Server monitoring
	GetServerStats(context.Context, *GetServerStatsRequest) (*ServerStats, error)
	GetServerHealth(context.Context, *GetServerHealthRequest) (*ServerHealth, error)
	MonitorServer(*MonitorServerRequest, grpc.ServerStreamingServer[ServerMonitorEvent]) error
	// Server filtering
	GetServersByType(context.Context, *GetServersByTypeRequest) (*GetServersByTypeResponse, error)
	GetServersByRegion(context.Context, *GetServersByRegionRequest) (*GetServersByRegionResponse, error)
	GetServersByStatus(context.Context, *GetServersByStatusRequest) (*GetServersByStatusResponse, error)
	// Scaling and management
	ScaleServer(context.Context, *ScaleServerRequest) (*ScaleServerResponse, error)
	CreateBackup(context.Context, *CreateBackupRequest) (*CreateBackupResponse, error)
	RestoreBackup(context.Context, *RestoreBackupRequest) (*RestoreBackupResponse, error)
	UpdateServerSoftware(context.Context, *UpdateServerSoftwareRequest) (*UpdateServerSoftwareResponse, error)
	mustEmbedUnimplementedServerManagerServiceServer()
}

// UnimplementedServerManagerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServerManagerServiceServer struct{}

func (UnimplementedServerManagerServiceServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedServerManagerServiceServer) CreateServer(context.Context, *CreateServerRequest) (*Server, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServer not implemented")
}
func (UnimplementedServerManagerServiceServer) GetServer(context.Context, *GetServerRequest) (*Server, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServer not implemented")
}
func (UnimplementedServerManagerServiceServer) ListServers(context.Context, *ListServersRequest) (*ListServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServers not implemented")
}
func (UnimplementedServerManagerServiceServer) UpdateServer(context.Context, *UpdateServerRequest) (*Server, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServer not implemented")
}
func (UnimplementedServerManagerServiceServer) DeleteServer(context.Context, *DeleteServerRequest) (*DeleteServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServer not implemented")
}
func (UnimplementedServerManagerServiceServer) StartServer(context.Context, *StartServerRequest) (*StartServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartServer not implemented")
}
func (UnimplementedServerManagerServiceServer) StopServer(context.Context, *StopServerRequest) (*StopServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopServer not implemented")
}
func (UnimplementedServerManagerServiceServer) RestartServer(context.Context, *RestartServerRequest) (*RestartServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartServer not implemented")
}
func (UnimplementedServerManagerServiceServer) GetServerStats(context.Context, *GetServerStatsRequest) (*ServerStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerStats not implemented")
}
func (UnimplementedServerManagerServiceServer) GetServerHealth(context.Context, *GetServerHealthRequest) (*ServerHealth, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerHealth not implemented")
}
func (UnimplementedServerManagerServiceServer) MonitorServer(*MonitorServerRequest, grpc.ServerStreamingServer[ServerMonitorEvent]) error {
	return status.Errorf(codes.Unimplemented, "method MonitorServer not implemented")
}
func (UnimplementedServerManagerServiceServer) GetServersByType(context.Context, *GetServersByTypeRequest) (*GetServersByTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServersByType not implemented")
}
func (UnimplementedServerManagerServiceServer) GetServersByRegion(context.Context, *GetServersByRegionRequest) (*GetServersByRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServersByRegion not implemented")
}
func (UnimplementedServerManagerServiceServer) GetServersByStatus(context.Context, *GetServersByStatusRequest) (*GetServersByStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServersByStatus not implemented")
}
func (UnimplementedServerManagerServiceServer) ScaleServer(context.Context, *ScaleServerRequest) (*ScaleServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScaleServer not implemented")
}
func (UnimplementedServerManagerServiceServer) CreateBackup(context.Context, *CreateBackupRequest) (*CreateBackupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBackup not implemented")
}
func (UnimplementedServerManagerServiceServer) RestoreBackup(context.Context, *RestoreBackupRequest) (*RestoreBackupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreBackup not implemented")
}
func (UnimplementedServerManagerServiceServer) UpdateServerSoftware(context.Context, *UpdateServerSoftwareRequest) (*UpdateServerSoftwareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServerSoftware not implemented")
}
func (UnimplementedServerManagerServiceServer) mustEmbedUnimplementedServerManagerServiceServer() {}
func (UnimplementedServerManagerServiceServer) testEmbeddedByValue()                              {}

// UnsafeServerManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerManagerServiceServer will
// result in compilation errors.
type UnsafeServerManagerServiceServer interface {
	mustEmbedUnimplementedServerManagerServiceServer()
}

func RegisterServerManagerServiceServer(s grpc.ServiceRegistrar, srv ServerManagerServiceServer) {
	// If the following call pancis, it indicates UnimplementedServerManagerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServerManagerService_ServiceDesc, srv)
}

func _ServerManagerService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManagerService_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServiceServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagerService_CreateServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServiceServer).CreateServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManagerService_CreateServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServiceServer).CreateServer(ctx, req.(*CreateServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagerService_GetServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServiceServer).GetServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManagerService_GetServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServiceServer).GetServer(ctx, req.(*GetServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagerService_ListServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServiceServer).ListServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManagerService_ListServers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServiceServer).ListServers(ctx, req.(*ListServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagerService_UpdateServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServiceServer).UpdateServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManagerService_UpdateServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServiceServer).UpdateServer(ctx, req.(*UpdateServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagerService_DeleteServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServiceServer).DeleteServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManagerService_DeleteServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServiceServer).DeleteServer(ctx, req.(*DeleteServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagerService_StartServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServiceServer).StartServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManagerService_StartServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServiceServer).StartServer(ctx, req.(*StartServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagerService_StopServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServiceServer).StopServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManagerService_StopServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServiceServer).StopServer(ctx, req.(*StopServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagerService_RestartServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServiceServer).RestartServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManagerService_RestartServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServiceServer).RestartServer(ctx, req.(*RestartServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagerService_GetServerStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServiceServer).GetServerStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManagerService_GetServerStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServiceServer).GetServerStats(ctx, req.(*GetServerStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagerService_GetServerHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServiceServer).GetServerHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManagerService_GetServerHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServiceServer).GetServerHealth(ctx, req.(*GetServerHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagerService_MonitorServer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MonitorServerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServerManagerServiceServer).MonitorServer(m, &grpc.GenericServerStream[MonitorServerRequest, ServerMonitorEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ServerManagerService_MonitorServerServer = grpc.ServerStreamingServer[ServerMonitorEvent]

func _ServerManagerService_GetServersByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServersByTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServiceServer).GetServersByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManagerService_GetServersByType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServiceServer).GetServersByType(ctx, req.(*GetServersByTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagerService_GetServersByRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServersByRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServiceServer).GetServersByRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManagerService_GetServersByRegion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServiceServer).GetServersByRegion(ctx, req.(*GetServersByRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagerService_GetServersByStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServersByStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServiceServer).GetServersByStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManagerService_GetServersByStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServiceServer).GetServersByStatus(ctx, req.(*GetServersByStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagerService_ScaleServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScaleServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServiceServer).ScaleServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManagerService_ScaleServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServiceServer).ScaleServer(ctx, req.(*ScaleServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagerService_CreateBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServiceServer).CreateBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManagerService_CreateBackup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServiceServer).CreateBackup(ctx, req.(*CreateBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagerService_RestoreBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServiceServer).RestoreBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManagerService_RestoreBackup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServiceServer).RestoreBackup(ctx, req.(*RestoreBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagerService_UpdateServerSoftware_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServerSoftwareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServiceServer).UpdateServerSoftware(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManagerService_UpdateServerSoftware_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServiceServer).UpdateServerSoftware(ctx, req.(*UpdateServerSoftwareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServerManagerService_ServiceDesc is the grpc.ServiceDesc for ServerManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.ServerManagerService",
	HandlerType: (*ServerManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _ServerManagerService_Health_Handler,
		},
		{
			MethodName: "CreateServer",
			Handler:    _ServerManagerService_CreateServer_Handler,
		},
		{
			MethodName: "GetServer",
			Handler:    _ServerManagerService_GetServer_Handler,
		},
		{
			MethodName: "ListServers",
			Handler:    _ServerManagerService_ListServers_Handler,
		},
		{
			MethodName: "UpdateServer",
			Handler:    _ServerManagerService_UpdateServer_Handler,
		},
		{
			MethodName: "DeleteServer",
			Handler:    _ServerManagerService_DeleteServer_Handler,
		},
		{
			MethodName: "StartServer",
			Handler:    _ServerManagerService_StartServer_Handler,
		},
		{
			MethodName: "StopServer",
			Handler:    _ServerManagerService_StopServer_Handler,
		},
		{
			MethodName: "RestartServer",
			Handler:    _ServerManagerService_RestartServer_Handler,
		},
		{
			MethodName: "GetServerStats",
			Handler:    _ServerManagerService_GetServerStats_Handler,
		},
		{
			MethodName: "GetServerHealth",
			Handler:    _ServerManagerService_GetServerHealth_Handler,
		},
		{
			MethodName: "GetServersByType",
			Handler:    _ServerManagerService_GetServersByType_Handler,
		},
		{
			MethodName: "GetServersByRegion",
			Handler:    _ServerManagerService_GetServersByRegion_Handler,
		},
		{
			MethodName: "GetServersByStatus",
			Handler:    _ServerManagerService_GetServersByStatus_Handler,
		},
		{
			MethodName: "ScaleServer",
			Handler:    _ServerManagerService_ScaleServer_Handler,
		},
		{
			MethodName: "CreateBackup",
			Handler:    _ServerManagerService_CreateBackup_Handler,
		},
		{
			MethodName: "RestoreBackup",
			Handler:    _ServerManagerService_RestoreBackup_Handler,
		},
		{
			MethodName: "UpdateServerSoftware",
			Handler:    _ServerManagerService_UpdateServerSoftware_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MonitorServer",
			Handler:       _ServerManagerService_MonitorServer_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/proto/server-manager/server.proto",
}
