// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/proto/vpn-core/vpn.proto

package vpn_core

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VpnCoreService_Health_FullMethodName              = "/vpn.VpnCoreService/Health"
	VpnCoreService_CreateTunnel_FullMethodName        = "/vpn.VpnCoreService/CreateTunnel"
	VpnCoreService_GetTunnel_FullMethodName           = "/vpn.VpnCoreService/GetTunnel"
	VpnCoreService_ListTunnels_FullMethodName         = "/vpn.VpnCoreService/ListTunnels"
	VpnCoreService_DeleteTunnel_FullMethodName        = "/vpn.VpnCoreService/DeleteTunnel"
	VpnCoreService_StartTunnel_FullMethodName         = "/vpn.VpnCoreService/StartTunnel"
	VpnCoreService_StopTunnel_FullMethodName          = "/vpn.VpnCoreService/StopTunnel"
	VpnCoreService_GetTunnelStats_FullMethodName      = "/vpn.VpnCoreService/GetTunnelStats"
	VpnCoreService_HealthCheck_FullMethodName         = "/vpn.VpnCoreService/HealthCheck"
	VpnCoreService_EnableAutoRecovery_FullMethodName  = "/vpn.VpnCoreService/EnableAutoRecovery"
	VpnCoreService_DisableAutoRecovery_FullMethodName = "/vpn.VpnCoreService/DisableAutoRecovery"
	VpnCoreService_RecoverTunnel_FullMethodName       = "/vpn.VpnCoreService/RecoverTunnel"
	VpnCoreService_AddPeer_FullMethodName             = "/vpn.VpnCoreService/AddPeer"
	VpnCoreService_GetPeer_FullMethodName             = "/vpn.VpnCoreService/GetPeer"
	VpnCoreService_ListPeers_FullMethodName           = "/vpn.VpnCoreService/ListPeers"
	VpnCoreService_RemovePeer_FullMethodName          = "/vpn.VpnCoreService/RemovePeer"
)

// VpnCoreServiceClient is the client API for VpnCoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// VPN Core Service
type VpnCoreServiceClient interface {
	// Health check
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
	// Tunnel management
	CreateTunnel(ctx context.Context, in *CreateTunnelRequest, opts ...grpc.CallOption) (*Tunnel, error)
	GetTunnel(ctx context.Context, in *GetTunnelRequest, opts ...grpc.CallOption) (*Tunnel, error)
	ListTunnels(ctx context.Context, in *ListTunnelsRequest, opts ...grpc.CallOption) (*ListTunnelsResponse, error)
	DeleteTunnel(ctx context.Context, in *DeleteTunnelRequest, opts ...grpc.CallOption) (*DeleteTunnelResponse, error)
	StartTunnel(ctx context.Context, in *StartTunnelRequest, opts ...grpc.CallOption) (*StartTunnelResponse, error)
	StopTunnel(ctx context.Context, in *StopTunnelRequest, opts ...grpc.CallOption) (*StopTunnelResponse, error)
	GetTunnelStats(ctx context.Context, in *GetTunnelStatsRequest, opts ...grpc.CallOption) (*TunnelStats, error)
	// Новые методы для мониторинга и восстановления
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	EnableAutoRecovery(ctx context.Context, in *EnableAutoRecoveryRequest, opts ...grpc.CallOption) (*EnableAutoRecoveryResponse, error)
	DisableAutoRecovery(ctx context.Context, in *DisableAutoRecoveryRequest, opts ...grpc.CallOption) (*DisableAutoRecoveryResponse, error)
	RecoverTunnel(ctx context.Context, in *RecoverTunnelRequest, opts ...grpc.CallOption) (*RecoverTunnelResponse, error)
	// Peer management
	AddPeer(ctx context.Context, in *AddPeerRequest, opts ...grpc.CallOption) (*Peer, error)
	GetPeer(ctx context.Context, in *GetPeerRequest, opts ...grpc.CallOption) (*Peer, error)
	ListPeers(ctx context.Context, in *ListPeersRequest, opts ...grpc.CallOption) (*ListPeersResponse, error)
	RemovePeer(ctx context.Context, in *RemovePeerRequest, opts ...grpc.CallOption) (*RemovePeerResponse, error)
}

type vpnCoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVpnCoreServiceClient(cc grpc.ClientConnInterface) VpnCoreServiceClient {
	return &vpnCoreServiceClient{cc}
}

func (c *vpnCoreServiceClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, VpnCoreService_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpnCoreServiceClient) CreateTunnel(ctx context.Context, in *CreateTunnelRequest, opts ...grpc.CallOption) (*Tunnel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Tunnel)
	err := c.cc.Invoke(ctx, VpnCoreService_CreateTunnel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpnCoreServiceClient) GetTunnel(ctx context.Context, in *GetTunnelRequest, opts ...grpc.CallOption) (*Tunnel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Tunnel)
	err := c.cc.Invoke(ctx, VpnCoreService_GetTunnel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpnCoreServiceClient) ListTunnels(ctx context.Context, in *ListTunnelsRequest, opts ...grpc.CallOption) (*ListTunnelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTunnelsResponse)
	err := c.cc.Invoke(ctx, VpnCoreService_ListTunnels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpnCoreServiceClient) DeleteTunnel(ctx context.Context, in *DeleteTunnelRequest, opts ...grpc.CallOption) (*DeleteTunnelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTunnelResponse)
	err := c.cc.Invoke(ctx, VpnCoreService_DeleteTunnel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpnCoreServiceClient) StartTunnel(ctx context.Context, in *StartTunnelRequest, opts ...grpc.CallOption) (*StartTunnelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartTunnelResponse)
	err := c.cc.Invoke(ctx, VpnCoreService_StartTunnel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpnCoreServiceClient) StopTunnel(ctx context.Context, in *StopTunnelRequest, opts ...grpc.CallOption) (*StopTunnelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopTunnelResponse)
	err := c.cc.Invoke(ctx, VpnCoreService_StopTunnel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpnCoreServiceClient) GetTunnelStats(ctx context.Context, in *GetTunnelStatsRequest, opts ...grpc.CallOption) (*TunnelStats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TunnelStats)
	err := c.cc.Invoke(ctx, VpnCoreService_GetTunnelStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpnCoreServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, VpnCoreService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpnCoreServiceClient) EnableAutoRecovery(ctx context.Context, in *EnableAutoRecoveryRequest, opts ...grpc.CallOption) (*EnableAutoRecoveryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableAutoRecoveryResponse)
	err := c.cc.Invoke(ctx, VpnCoreService_EnableAutoRecovery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpnCoreServiceClient) DisableAutoRecovery(ctx context.Context, in *DisableAutoRecoveryRequest, opts ...grpc.CallOption) (*DisableAutoRecoveryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisableAutoRecoveryResponse)
	err := c.cc.Invoke(ctx, VpnCoreService_DisableAutoRecovery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpnCoreServiceClient) RecoverTunnel(ctx context.Context, in *RecoverTunnelRequest, opts ...grpc.CallOption) (*RecoverTunnelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecoverTunnelResponse)
	err := c.cc.Invoke(ctx, VpnCoreService_RecoverTunnel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpnCoreServiceClient) AddPeer(ctx context.Context, in *AddPeerRequest, opts ...grpc.CallOption) (*Peer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Peer)
	err := c.cc.Invoke(ctx, VpnCoreService_AddPeer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpnCoreServiceClient) GetPeer(ctx context.Context, in *GetPeerRequest, opts ...grpc.CallOption) (*Peer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Peer)
	err := c.cc.Invoke(ctx, VpnCoreService_GetPeer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpnCoreServiceClient) ListPeers(ctx context.Context, in *ListPeersRequest, opts ...grpc.CallOption) (*ListPeersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPeersResponse)
	err := c.cc.Invoke(ctx, VpnCoreService_ListPeers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpnCoreServiceClient) RemovePeer(ctx context.Context, in *RemovePeerRequest, opts ...grpc.CallOption) (*RemovePeerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemovePeerResponse)
	err := c.cc.Invoke(ctx, VpnCoreService_RemovePeer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VpnCoreServiceServer is the server API for VpnCoreService service.
// All implementations must embed UnimplementedVpnCoreServiceServer
// for forward compatibility.
//
// VPN Core Service
type VpnCoreServiceServer interface {
	// Health check
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	// Tunnel management
	CreateTunnel(context.Context, *CreateTunnelRequest) (*Tunnel, error)
	GetTunnel(context.Context, *GetTunnelRequest) (*Tunnel, error)
	ListTunnels(context.Context, *ListTunnelsRequest) (*ListTunnelsResponse, error)
	DeleteTunnel(context.Context, *DeleteTunnelRequest) (*DeleteTunnelResponse, error)
	StartTunnel(context.Context, *StartTunnelRequest) (*StartTunnelResponse, error)
	StopTunnel(context.Context, *StopTunnelRequest) (*StopTunnelResponse, error)
	GetTunnelStats(context.Context, *GetTunnelStatsRequest) (*TunnelStats, error)
	// Новые методы для мониторинга и восстановления
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	EnableAutoRecovery(context.Context, *EnableAutoRecoveryRequest) (*EnableAutoRecoveryResponse, error)
	DisableAutoRecovery(context.Context, *DisableAutoRecoveryRequest) (*DisableAutoRecoveryResponse, error)
	RecoverTunnel(context.Context, *RecoverTunnelRequest) (*RecoverTunnelResponse, error)
	// Peer management
	AddPeer(context.Context, *AddPeerRequest) (*Peer, error)
	GetPeer(context.Context, *GetPeerRequest) (*Peer, error)
	ListPeers(context.Context, *ListPeersRequest) (*ListPeersResponse, error)
	RemovePeer(context.Context, *RemovePeerRequest) (*RemovePeerResponse, error)
	mustEmbedUnimplementedVpnCoreServiceServer()
}

// UnimplementedVpnCoreServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVpnCoreServiceServer struct{}

func (UnimplementedVpnCoreServiceServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedVpnCoreServiceServer) CreateTunnel(context.Context, *CreateTunnelRequest) (*Tunnel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTunnel not implemented")
}
func (UnimplementedVpnCoreServiceServer) GetTunnel(context.Context, *GetTunnelRequest) (*Tunnel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTunnel not implemented")
}
func (UnimplementedVpnCoreServiceServer) ListTunnels(context.Context, *ListTunnelsRequest) (*ListTunnelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTunnels not implemented")
}
func (UnimplementedVpnCoreServiceServer) DeleteTunnel(context.Context, *DeleteTunnelRequest) (*DeleteTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTunnel not implemented")
}
func (UnimplementedVpnCoreServiceServer) StartTunnel(context.Context, *StartTunnelRequest) (*StartTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTunnel not implemented")
}
func (UnimplementedVpnCoreServiceServer) StopTunnel(context.Context, *StopTunnelRequest) (*StopTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopTunnel not implemented")
}
func (UnimplementedVpnCoreServiceServer) GetTunnelStats(context.Context, *GetTunnelStatsRequest) (*TunnelStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTunnelStats not implemented")
}
func (UnimplementedVpnCoreServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedVpnCoreServiceServer) EnableAutoRecovery(context.Context, *EnableAutoRecoveryRequest) (*EnableAutoRecoveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableAutoRecovery not implemented")
}
func (UnimplementedVpnCoreServiceServer) DisableAutoRecovery(context.Context, *DisableAutoRecoveryRequest) (*DisableAutoRecoveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableAutoRecovery not implemented")
}
func (UnimplementedVpnCoreServiceServer) RecoverTunnel(context.Context, *RecoverTunnelRequest) (*RecoverTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverTunnel not implemented")
}
func (UnimplementedVpnCoreServiceServer) AddPeer(context.Context, *AddPeerRequest) (*Peer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPeer not implemented")
}
func (UnimplementedVpnCoreServiceServer) GetPeer(context.Context, *GetPeerRequest) (*Peer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeer not implemented")
}
func (UnimplementedVpnCoreServiceServer) ListPeers(context.Context, *ListPeersRequest) (*ListPeersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPeers not implemented")
}
func (UnimplementedVpnCoreServiceServer) RemovePeer(context.Context, *RemovePeerRequest) (*RemovePeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePeer not implemented")
}
func (UnimplementedVpnCoreServiceServer) mustEmbedUnimplementedVpnCoreServiceServer() {}
func (UnimplementedVpnCoreServiceServer) testEmbeddedByValue()                        {}

// UnsafeVpnCoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VpnCoreServiceServer will
// result in compilation errors.
type UnsafeVpnCoreServiceServer interface {
	mustEmbedUnimplementedVpnCoreServiceServer()
}

func RegisterVpnCoreServiceServer(s grpc.ServiceRegistrar, srv VpnCoreServiceServer) {
	// If the following call pancis, it indicates UnimplementedVpnCoreServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VpnCoreService_ServiceDesc, srv)
}

func _VpnCoreService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnCoreServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpnCoreService_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnCoreServiceServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpnCoreService_CreateTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnCoreServiceServer).CreateTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpnCoreService_CreateTunnel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnCoreServiceServer).CreateTunnel(ctx, req.(*CreateTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpnCoreService_GetTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnCoreServiceServer).GetTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpnCoreService_GetTunnel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnCoreServiceServer).GetTunnel(ctx, req.(*GetTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpnCoreService_ListTunnels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTunnelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnCoreServiceServer).ListTunnels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpnCoreService_ListTunnels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnCoreServiceServer).ListTunnels(ctx, req.(*ListTunnelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpnCoreService_DeleteTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnCoreServiceServer).DeleteTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpnCoreService_DeleteTunnel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnCoreServiceServer).DeleteTunnel(ctx, req.(*DeleteTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpnCoreService_StartTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnCoreServiceServer).StartTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpnCoreService_StartTunnel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnCoreServiceServer).StartTunnel(ctx, req.(*StartTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpnCoreService_StopTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnCoreServiceServer).StopTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpnCoreService_StopTunnel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnCoreServiceServer).StopTunnel(ctx, req.(*StopTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpnCoreService_GetTunnelStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTunnelStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnCoreServiceServer).GetTunnelStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpnCoreService_GetTunnelStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnCoreServiceServer).GetTunnelStats(ctx, req.(*GetTunnelStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpnCoreService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnCoreServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpnCoreService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnCoreServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpnCoreService_EnableAutoRecovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableAutoRecoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnCoreServiceServer).EnableAutoRecovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpnCoreService_EnableAutoRecovery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnCoreServiceServer).EnableAutoRecovery(ctx, req.(*EnableAutoRecoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpnCoreService_DisableAutoRecovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableAutoRecoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnCoreServiceServer).DisableAutoRecovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpnCoreService_DisableAutoRecovery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnCoreServiceServer).DisableAutoRecovery(ctx, req.(*DisableAutoRecoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpnCoreService_RecoverTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoverTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnCoreServiceServer).RecoverTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpnCoreService_RecoverTunnel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnCoreServiceServer).RecoverTunnel(ctx, req.(*RecoverTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpnCoreService_AddPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnCoreServiceServer).AddPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpnCoreService_AddPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnCoreServiceServer).AddPeer(ctx, req.(*AddPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpnCoreService_GetPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnCoreServiceServer).GetPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpnCoreService_GetPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnCoreServiceServer).GetPeer(ctx, req.(*GetPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpnCoreService_ListPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnCoreServiceServer).ListPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpnCoreService_ListPeers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnCoreServiceServer).ListPeers(ctx, req.(*ListPeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpnCoreService_RemovePeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnCoreServiceServer).RemovePeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpnCoreService_RemovePeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnCoreServiceServer).RemovePeer(ctx, req.(*RemovePeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VpnCoreService_ServiceDesc is the grpc.ServiceDesc for VpnCoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VpnCoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vpn.VpnCoreService",
	HandlerType: (*VpnCoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _VpnCoreService_Health_Handler,
		},
		{
			MethodName: "CreateTunnel",
			Handler:    _VpnCoreService_CreateTunnel_Handler,
		},
		{
			MethodName: "GetTunnel",
			Handler:    _VpnCoreService_GetTunnel_Handler,
		},
		{
			MethodName: "ListTunnels",
			Handler:    _VpnCoreService_ListTunnels_Handler,
		},
		{
			MethodName: "DeleteTunnel",
			Handler:    _VpnCoreService_DeleteTunnel_Handler,
		},
		{
			MethodName: "StartTunnel",
			Handler:    _VpnCoreService_StartTunnel_Handler,
		},
		{
			MethodName: "StopTunnel",
			Handler:    _VpnCoreService_StopTunnel_Handler,
		},
		{
			MethodName: "GetTunnelStats",
			Handler:    _VpnCoreService_GetTunnelStats_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _VpnCoreService_HealthCheck_Handler,
		},
		{
			MethodName: "EnableAutoRecovery",
			Handler:    _VpnCoreService_EnableAutoRecovery_Handler,
		},
		{
			MethodName: "DisableAutoRecovery",
			Handler:    _VpnCoreService_DisableAutoRecovery_Handler,
		},
		{
			MethodName: "RecoverTunnel",
			Handler:    _VpnCoreService_RecoverTunnel_Handler,
		},
		{
			MethodName: "AddPeer",
			Handler:    _VpnCoreService_AddPeer_Handler,
		},
		{
			MethodName: "GetPeer",
			Handler:    _VpnCoreService_GetPeer_Handler,
		},
		{
			MethodName: "ListPeers",
			Handler:    _VpnCoreService_ListPeers_Handler,
		},
		{
			MethodName: "RemovePeer",
			Handler:    _VpnCoreService_RemovePeer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/vpn-core/vpn.proto",
}
