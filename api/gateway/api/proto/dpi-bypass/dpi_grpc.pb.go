// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/proto/dpi-bypass/dpi.proto

package dpi_bypass

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DpiBypassService_Health_FullMethodName             = "/dpi.DpiBypassService/Health"
	DpiBypassService_CreateBypassConfig_FullMethodName = "/dpi.DpiBypassService/CreateBypassConfig"
	DpiBypassService_GetBypassConfig_FullMethodName    = "/dpi.DpiBypassService/GetBypassConfig"
	DpiBypassService_ListBypassConfigs_FullMethodName  = "/dpi.DpiBypassService/ListBypassConfigs"
	DpiBypassService_UpdateBypassConfig_FullMethodName = "/dpi.DpiBypassService/UpdateBypassConfig"
	DpiBypassService_DeleteBypassConfig_FullMethodName = "/dpi.DpiBypassService/DeleteBypassConfig"
	DpiBypassService_StartBypass_FullMethodName        = "/dpi.DpiBypassService/StartBypass"
	DpiBypassService_StopBypass_FullMethodName         = "/dpi.DpiBypassService/StopBypass"
	DpiBypassService_GetBypassStatus_FullMethodName    = "/dpi.DpiBypassService/GetBypassStatus"
	DpiBypassService_GetBypassStats_FullMethodName     = "/dpi.DpiBypassService/GetBypassStats"
	DpiBypassService_GetBypassHistory_FullMethodName   = "/dpi.DpiBypassService/GetBypassHistory"
	DpiBypassService_AddBypassRule_FullMethodName      = "/dpi.DpiBypassService/AddBypassRule"
	DpiBypassService_UpdateBypassRule_FullMethodName   = "/dpi.DpiBypassService/UpdateBypassRule"
	DpiBypassService_DeleteBypassRule_FullMethodName   = "/dpi.DpiBypassService/DeleteBypassRule"
	DpiBypassService_ListBypassRules_FullMethodName    = "/dpi.DpiBypassService/ListBypassRules"
)

// DpiBypassServiceClient is the client API for DpiBypassService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DPI Bypass Service
type DpiBypassServiceClient interface {
	// Health check
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
	// Bypass configuration management
	CreateBypassConfig(ctx context.Context, in *CreateBypassConfigRequest, opts ...grpc.CallOption) (*BypassConfig, error)
	GetBypassConfig(ctx context.Context, in *GetBypassConfigRequest, opts ...grpc.CallOption) (*BypassConfig, error)
	ListBypassConfigs(ctx context.Context, in *ListBypassConfigsRequest, opts ...grpc.CallOption) (*ListBypassConfigsResponse, error)
	UpdateBypassConfig(ctx context.Context, in *UpdateBypassConfigRequest, opts ...grpc.CallOption) (*BypassConfig, error)
	DeleteBypassConfig(ctx context.Context, in *DeleteBypassConfigRequest, opts ...grpc.CallOption) (*DeleteBypassConfigResponse, error)
	// Bypass operations
	StartBypass(ctx context.Context, in *StartBypassRequest, opts ...grpc.CallOption) (*StartBypassResponse, error)
	StopBypass(ctx context.Context, in *StopBypassRequest, opts ...grpc.CallOption) (*StopBypassResponse, error)
	GetBypassStatus(ctx context.Context, in *GetBypassStatusRequest, opts ...grpc.CallOption) (*GetBypassStatusResponse, error)
	// Statistics and monitoring
	GetBypassStats(ctx context.Context, in *GetBypassStatsRequest, opts ...grpc.CallOption) (*BypassStats, error)
	GetBypassHistory(ctx context.Context, in *GetBypassHistoryRequest, opts ...grpc.CallOption) (*GetBypassHistoryResponse, error)
	// Rule management
	AddBypassRule(ctx context.Context, in *AddBypassRuleRequest, opts ...grpc.CallOption) (*BypassRule, error)
	UpdateBypassRule(ctx context.Context, in *UpdateBypassRuleRequest, opts ...grpc.CallOption) (*BypassRule, error)
	DeleteBypassRule(ctx context.Context, in *DeleteBypassRuleRequest, opts ...grpc.CallOption) (*DeleteBypassRuleResponse, error)
	ListBypassRules(ctx context.Context, in *ListBypassRulesRequest, opts ...grpc.CallOption) (*ListBypassRulesResponse, error)
}

type dpiBypassServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDpiBypassServiceClient(cc grpc.ClientConnInterface) DpiBypassServiceClient {
	return &dpiBypassServiceClient{cc}
}

func (c *dpiBypassServiceClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, DpiBypassService_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpiBypassServiceClient) CreateBypassConfig(ctx context.Context, in *CreateBypassConfigRequest, opts ...grpc.CallOption) (*BypassConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BypassConfig)
	err := c.cc.Invoke(ctx, DpiBypassService_CreateBypassConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpiBypassServiceClient) GetBypassConfig(ctx context.Context, in *GetBypassConfigRequest, opts ...grpc.CallOption) (*BypassConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BypassConfig)
	err := c.cc.Invoke(ctx, DpiBypassService_GetBypassConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpiBypassServiceClient) ListBypassConfigs(ctx context.Context, in *ListBypassConfigsRequest, opts ...grpc.CallOption) (*ListBypassConfigsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBypassConfigsResponse)
	err := c.cc.Invoke(ctx, DpiBypassService_ListBypassConfigs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpiBypassServiceClient) UpdateBypassConfig(ctx context.Context, in *UpdateBypassConfigRequest, opts ...grpc.CallOption) (*BypassConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BypassConfig)
	err := c.cc.Invoke(ctx, DpiBypassService_UpdateBypassConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpiBypassServiceClient) DeleteBypassConfig(ctx context.Context, in *DeleteBypassConfigRequest, opts ...grpc.CallOption) (*DeleteBypassConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBypassConfigResponse)
	err := c.cc.Invoke(ctx, DpiBypassService_DeleteBypassConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpiBypassServiceClient) StartBypass(ctx context.Context, in *StartBypassRequest, opts ...grpc.CallOption) (*StartBypassResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartBypassResponse)
	err := c.cc.Invoke(ctx, DpiBypassService_StartBypass_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpiBypassServiceClient) StopBypass(ctx context.Context, in *StopBypassRequest, opts ...grpc.CallOption) (*StopBypassResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopBypassResponse)
	err := c.cc.Invoke(ctx, DpiBypassService_StopBypass_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpiBypassServiceClient) GetBypassStatus(ctx context.Context, in *GetBypassStatusRequest, opts ...grpc.CallOption) (*GetBypassStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBypassStatusResponse)
	err := c.cc.Invoke(ctx, DpiBypassService_GetBypassStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpiBypassServiceClient) GetBypassStats(ctx context.Context, in *GetBypassStatsRequest, opts ...grpc.CallOption) (*BypassStats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BypassStats)
	err := c.cc.Invoke(ctx, DpiBypassService_GetBypassStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpiBypassServiceClient) GetBypassHistory(ctx context.Context, in *GetBypassHistoryRequest, opts ...grpc.CallOption) (*GetBypassHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBypassHistoryResponse)
	err := c.cc.Invoke(ctx, DpiBypassService_GetBypassHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpiBypassServiceClient) AddBypassRule(ctx context.Context, in *AddBypassRuleRequest, opts ...grpc.CallOption) (*BypassRule, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BypassRule)
	err := c.cc.Invoke(ctx, DpiBypassService_AddBypassRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpiBypassServiceClient) UpdateBypassRule(ctx context.Context, in *UpdateBypassRuleRequest, opts ...grpc.CallOption) (*BypassRule, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BypassRule)
	err := c.cc.Invoke(ctx, DpiBypassService_UpdateBypassRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpiBypassServiceClient) DeleteBypassRule(ctx context.Context, in *DeleteBypassRuleRequest, opts ...grpc.CallOption) (*DeleteBypassRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBypassRuleResponse)
	err := c.cc.Invoke(ctx, DpiBypassService_DeleteBypassRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dpiBypassServiceClient) ListBypassRules(ctx context.Context, in *ListBypassRulesRequest, opts ...grpc.CallOption) (*ListBypassRulesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBypassRulesResponse)
	err := c.cc.Invoke(ctx, DpiBypassService_ListBypassRules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DpiBypassServiceServer is the server API for DpiBypassService service.
// All implementations must embed UnimplementedDpiBypassServiceServer
// for forward compatibility.
//
// DPI Bypass Service
type DpiBypassServiceServer interface {
	// Health check
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	// Bypass configuration management
	CreateBypassConfig(context.Context, *CreateBypassConfigRequest) (*BypassConfig, error)
	GetBypassConfig(context.Context, *GetBypassConfigRequest) (*BypassConfig, error)
	ListBypassConfigs(context.Context, *ListBypassConfigsRequest) (*ListBypassConfigsResponse, error)
	UpdateBypassConfig(context.Context, *UpdateBypassConfigRequest) (*BypassConfig, error)
	DeleteBypassConfig(context.Context, *DeleteBypassConfigRequest) (*DeleteBypassConfigResponse, error)
	// Bypass operations
	StartBypass(context.Context, *StartBypassRequest) (*StartBypassResponse, error)
	StopBypass(context.Context, *StopBypassRequest) (*StopBypassResponse, error)
	GetBypassStatus(context.Context, *GetBypassStatusRequest) (*GetBypassStatusResponse, error)
	// Statistics and monitoring
	GetBypassStats(context.Context, *GetBypassStatsRequest) (*BypassStats, error)
	GetBypassHistory(context.Context, *GetBypassHistoryRequest) (*GetBypassHistoryResponse, error)
	// Rule management
	AddBypassRule(context.Context, *AddBypassRuleRequest) (*BypassRule, error)
	UpdateBypassRule(context.Context, *UpdateBypassRuleRequest) (*BypassRule, error)
	DeleteBypassRule(context.Context, *DeleteBypassRuleRequest) (*DeleteBypassRuleResponse, error)
	ListBypassRules(context.Context, *ListBypassRulesRequest) (*ListBypassRulesResponse, error)
	mustEmbedUnimplementedDpiBypassServiceServer()
}

// UnimplementedDpiBypassServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDpiBypassServiceServer struct{}

func (UnimplementedDpiBypassServiceServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedDpiBypassServiceServer) CreateBypassConfig(context.Context, *CreateBypassConfigRequest) (*BypassConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBypassConfig not implemented")
}
func (UnimplementedDpiBypassServiceServer) GetBypassConfig(context.Context, *GetBypassConfigRequest) (*BypassConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBypassConfig not implemented")
}
func (UnimplementedDpiBypassServiceServer) ListBypassConfigs(context.Context, *ListBypassConfigsRequest) (*ListBypassConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBypassConfigs not implemented")
}
func (UnimplementedDpiBypassServiceServer) UpdateBypassConfig(context.Context, *UpdateBypassConfigRequest) (*BypassConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBypassConfig not implemented")
}
func (UnimplementedDpiBypassServiceServer) DeleteBypassConfig(context.Context, *DeleteBypassConfigRequest) (*DeleteBypassConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBypassConfig not implemented")
}
func (UnimplementedDpiBypassServiceServer) StartBypass(context.Context, *StartBypassRequest) (*StartBypassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartBypass not implemented")
}
func (UnimplementedDpiBypassServiceServer) StopBypass(context.Context, *StopBypassRequest) (*StopBypassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopBypass not implemented")
}
func (UnimplementedDpiBypassServiceServer) GetBypassStatus(context.Context, *GetBypassStatusRequest) (*GetBypassStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBypassStatus not implemented")
}
func (UnimplementedDpiBypassServiceServer) GetBypassStats(context.Context, *GetBypassStatsRequest) (*BypassStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBypassStats not implemented")
}
func (UnimplementedDpiBypassServiceServer) GetBypassHistory(context.Context, *GetBypassHistoryRequest) (*GetBypassHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBypassHistory not implemented")
}
func (UnimplementedDpiBypassServiceServer) AddBypassRule(context.Context, *AddBypassRuleRequest) (*BypassRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBypassRule not implemented")
}
func (UnimplementedDpiBypassServiceServer) UpdateBypassRule(context.Context, *UpdateBypassRuleRequest) (*BypassRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBypassRule not implemented")
}
func (UnimplementedDpiBypassServiceServer) DeleteBypassRule(context.Context, *DeleteBypassRuleRequest) (*DeleteBypassRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBypassRule not implemented")
}
func (UnimplementedDpiBypassServiceServer) ListBypassRules(context.Context, *ListBypassRulesRequest) (*ListBypassRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBypassRules not implemented")
}
func (UnimplementedDpiBypassServiceServer) mustEmbedUnimplementedDpiBypassServiceServer() {}
func (UnimplementedDpiBypassServiceServer) testEmbeddedByValue()                          {}

// UnsafeDpiBypassServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DpiBypassServiceServer will
// result in compilation errors.
type UnsafeDpiBypassServiceServer interface {
	mustEmbedUnimplementedDpiBypassServiceServer()
}

func RegisterDpiBypassServiceServer(s grpc.ServiceRegistrar, srv DpiBypassServiceServer) {
	// If the following call pancis, it indicates UnimplementedDpiBypassServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DpiBypassService_ServiceDesc, srv)
}

func _DpiBypassService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpiBypassServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DpiBypassService_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpiBypassServiceServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpiBypassService_CreateBypassConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBypassConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpiBypassServiceServer).CreateBypassConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DpiBypassService_CreateBypassConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpiBypassServiceServer).CreateBypassConfig(ctx, req.(*CreateBypassConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpiBypassService_GetBypassConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBypassConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpiBypassServiceServer).GetBypassConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DpiBypassService_GetBypassConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpiBypassServiceServer).GetBypassConfig(ctx, req.(*GetBypassConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpiBypassService_ListBypassConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBypassConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpiBypassServiceServer).ListBypassConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DpiBypassService_ListBypassConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpiBypassServiceServer).ListBypassConfigs(ctx, req.(*ListBypassConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpiBypassService_UpdateBypassConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBypassConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpiBypassServiceServer).UpdateBypassConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DpiBypassService_UpdateBypassConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpiBypassServiceServer).UpdateBypassConfig(ctx, req.(*UpdateBypassConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpiBypassService_DeleteBypassConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBypassConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpiBypassServiceServer).DeleteBypassConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DpiBypassService_DeleteBypassConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpiBypassServiceServer).DeleteBypassConfig(ctx, req.(*DeleteBypassConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpiBypassService_StartBypass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartBypassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpiBypassServiceServer).StartBypass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DpiBypassService_StartBypass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpiBypassServiceServer).StartBypass(ctx, req.(*StartBypassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpiBypassService_StopBypass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopBypassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpiBypassServiceServer).StopBypass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DpiBypassService_StopBypass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpiBypassServiceServer).StopBypass(ctx, req.(*StopBypassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpiBypassService_GetBypassStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBypassStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpiBypassServiceServer).GetBypassStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DpiBypassService_GetBypassStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpiBypassServiceServer).GetBypassStatus(ctx, req.(*GetBypassStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpiBypassService_GetBypassStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBypassStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpiBypassServiceServer).GetBypassStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DpiBypassService_GetBypassStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpiBypassServiceServer).GetBypassStats(ctx, req.(*GetBypassStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpiBypassService_GetBypassHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBypassHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpiBypassServiceServer).GetBypassHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DpiBypassService_GetBypassHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpiBypassServiceServer).GetBypassHistory(ctx, req.(*GetBypassHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpiBypassService_AddBypassRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBypassRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpiBypassServiceServer).AddBypassRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DpiBypassService_AddBypassRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpiBypassServiceServer).AddBypassRule(ctx, req.(*AddBypassRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpiBypassService_UpdateBypassRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBypassRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpiBypassServiceServer).UpdateBypassRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DpiBypassService_UpdateBypassRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpiBypassServiceServer).UpdateBypassRule(ctx, req.(*UpdateBypassRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpiBypassService_DeleteBypassRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBypassRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpiBypassServiceServer).DeleteBypassRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DpiBypassService_DeleteBypassRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpiBypassServiceServer).DeleteBypassRule(ctx, req.(*DeleteBypassRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DpiBypassService_ListBypassRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBypassRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DpiBypassServiceServer).ListBypassRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DpiBypassService_ListBypassRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DpiBypassServiceServer).ListBypassRules(ctx, req.(*ListBypassRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DpiBypassService_ServiceDesc is the grpc.ServiceDesc for DpiBypassService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DpiBypassService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dpi.DpiBypassService",
	HandlerType: (*DpiBypassServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _DpiBypassService_Health_Handler,
		},
		{
			MethodName: "CreateBypassConfig",
			Handler:    _DpiBypassService_CreateBypassConfig_Handler,
		},
		{
			MethodName: "GetBypassConfig",
			Handler:    _DpiBypassService_GetBypassConfig_Handler,
		},
		{
			MethodName: "ListBypassConfigs",
			Handler:    _DpiBypassService_ListBypassConfigs_Handler,
		},
		{
			MethodName: "UpdateBypassConfig",
			Handler:    _DpiBypassService_UpdateBypassConfig_Handler,
		},
		{
			MethodName: "DeleteBypassConfig",
			Handler:    _DpiBypassService_DeleteBypassConfig_Handler,
		},
		{
			MethodName: "StartBypass",
			Handler:    _DpiBypassService_StartBypass_Handler,
		},
		{
			MethodName: "StopBypass",
			Handler:    _DpiBypassService_StopBypass_Handler,
		},
		{
			MethodName: "GetBypassStatus",
			Handler:    _DpiBypassService_GetBypassStatus_Handler,
		},
		{
			MethodName: "GetBypassStats",
			Handler:    _DpiBypassService_GetBypassStats_Handler,
		},
		{
			MethodName: "GetBypassHistory",
			Handler:    _DpiBypassService_GetBypassHistory_Handler,
		},
		{
			MethodName: "AddBypassRule",
			Handler:    _DpiBypassService_AddBypassRule_Handler,
		},
		{
			MethodName: "UpdateBypassRule",
			Handler:    _DpiBypassService_UpdateBypassRule_Handler,
		},
		{
			MethodName: "DeleteBypassRule",
			Handler:    _DpiBypassService_DeleteBypassRule_Handler,
		},
		{
			MethodName: "ListBypassRules",
			Handler:    _DpiBypassService_ListBypassRules_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/dpi-bypass/dpi.proto",
}
