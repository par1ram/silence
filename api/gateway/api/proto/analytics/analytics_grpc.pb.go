// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/proto/analytics/analytics.proto

package analytics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AnalyticsService_Health_FullMethodName            = "/analytics.AnalyticsService/Health"
	AnalyticsService_CollectMetric_FullMethodName     = "/analytics.AnalyticsService/CollectMetric"
	AnalyticsService_GetMetrics_FullMethodName        = "/analytics.AnalyticsService/GetMetrics"
	AnalyticsService_GetMetricsHistory_FullMethodName = "/analytics.AnalyticsService/GetMetricsHistory"
	AnalyticsService_GetStatistics_FullMethodName     = "/analytics.AnalyticsService/GetStatistics"
	AnalyticsService_GetSystemStats_FullMethodName    = "/analytics.AnalyticsService/GetSystemStats"
	AnalyticsService_GetUserStats_FullMethodName      = "/analytics.AnalyticsService/GetUserStats"
	AnalyticsService_GetDashboardData_FullMethodName  = "/analytics.AnalyticsService/GetDashboardData"
	AnalyticsService_PredictLoad_FullMethodName       = "/analytics.AnalyticsService/PredictLoad"
	AnalyticsService_PredictTrend_FullMethodName      = "/analytics.AnalyticsService/PredictTrend"
)

// AnalyticsServiceClient is the client API for AnalyticsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Analytics Service
type AnalyticsServiceClient interface {
	// Health check
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
	// Metrics collection
	CollectMetric(ctx context.Context, in *CollectMetricRequest, opts ...grpc.CallOption) (*CollectMetricResponse, error)
	GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsResponse, error)
	GetMetricsHistory(ctx context.Context, in *GetMetricsHistoryRequest, opts ...grpc.CallOption) (*GetMetricsHistoryResponse, error)
	// Statistics
	GetStatistics(ctx context.Context, in *GetStatisticsRequest, opts ...grpc.CallOption) (*GetStatisticsResponse, error)
	GetSystemStats(ctx context.Context, in *GetSystemStatsRequest, opts ...grpc.CallOption) (*GetSystemStatsResponse, error)
	GetUserStats(ctx context.Context, in *GetUserStatsRequest, opts ...grpc.CallOption) (*GetUserStatsResponse, error)
	// Dashboard
	GetDashboardData(ctx context.Context, in *GetDashboardDataRequest, opts ...grpc.CallOption) (*GetDashboardDataResponse, error)
	// Predictions
	PredictLoad(ctx context.Context, in *PredictLoadRequest, opts ...grpc.CallOption) (*PredictLoadResponse, error)
	PredictTrend(ctx context.Context, in *PredictTrendRequest, opts ...grpc.CallOption) (*PredictTrendResponse, error)
}

type analyticsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalyticsServiceClient(cc grpc.ClientConnInterface) AnalyticsServiceClient {
	return &analyticsServiceClient{cc}
}

func (c *analyticsServiceClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) CollectMetric(ctx context.Context, in *CollectMetricRequest, opts ...grpc.CallOption) (*CollectMetricResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectMetricResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_CollectMetric_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMetricsResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetMetricsHistory(ctx context.Context, in *GetMetricsHistoryRequest, opts ...grpc.CallOption) (*GetMetricsHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMetricsHistoryResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetMetricsHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetStatistics(ctx context.Context, in *GetStatisticsRequest, opts ...grpc.CallOption) (*GetStatisticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatisticsResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetSystemStats(ctx context.Context, in *GetSystemStatsRequest, opts ...grpc.CallOption) (*GetSystemStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSystemStatsResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetSystemStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetUserStats(ctx context.Context, in *GetUserStatsRequest, opts ...grpc.CallOption) (*GetUserStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserStatsResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetUserStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetDashboardData(ctx context.Context, in *GetDashboardDataRequest, opts ...grpc.CallOption) (*GetDashboardDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDashboardDataResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetDashboardData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) PredictLoad(ctx context.Context, in *PredictLoadRequest, opts ...grpc.CallOption) (*PredictLoadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PredictLoadResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_PredictLoad_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) PredictTrend(ctx context.Context, in *PredictTrendRequest, opts ...grpc.CallOption) (*PredictTrendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PredictTrendResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_PredictTrend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnalyticsServiceServer is the server API for AnalyticsService service.
// All implementations must embed UnimplementedAnalyticsServiceServer
// for forward compatibility.
//
// Analytics Service
type AnalyticsServiceServer interface {
	// Health check
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	// Metrics collection
	CollectMetric(context.Context, *CollectMetricRequest) (*CollectMetricResponse, error)
	GetMetrics(context.Context, *GetMetricsRequest) (*GetMetricsResponse, error)
	GetMetricsHistory(context.Context, *GetMetricsHistoryRequest) (*GetMetricsHistoryResponse, error)
	// Statistics
	GetStatistics(context.Context, *GetStatisticsRequest) (*GetStatisticsResponse, error)
	GetSystemStats(context.Context, *GetSystemStatsRequest) (*GetSystemStatsResponse, error)
	GetUserStats(context.Context, *GetUserStatsRequest) (*GetUserStatsResponse, error)
	// Dashboard
	GetDashboardData(context.Context, *GetDashboardDataRequest) (*GetDashboardDataResponse, error)
	// Predictions
	PredictLoad(context.Context, *PredictLoadRequest) (*PredictLoadResponse, error)
	PredictTrend(context.Context, *PredictTrendRequest) (*PredictTrendResponse, error)
	mustEmbedUnimplementedAnalyticsServiceServer()
}

// UnimplementedAnalyticsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAnalyticsServiceServer struct{}

func (UnimplementedAnalyticsServiceServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedAnalyticsServiceServer) CollectMetric(context.Context, *CollectMetricRequest) (*CollectMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectMetric not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetMetrics(context.Context, *GetMetricsRequest) (*GetMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetMetricsHistory(context.Context, *GetMetricsHistoryRequest) (*GetMetricsHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetricsHistory not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetStatistics(context.Context, *GetStatisticsRequest) (*GetStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatistics not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetSystemStats(context.Context, *GetSystemStatsRequest) (*GetSystemStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemStats not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetUserStats(context.Context, *GetUserStatsRequest) (*GetUserStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserStats not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetDashboardData(context.Context, *GetDashboardDataRequest) (*GetDashboardDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDashboardData not implemented")
}
func (UnimplementedAnalyticsServiceServer) PredictLoad(context.Context, *PredictLoadRequest) (*PredictLoadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PredictLoad not implemented")
}
func (UnimplementedAnalyticsServiceServer) PredictTrend(context.Context, *PredictTrendRequest) (*PredictTrendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PredictTrend not implemented")
}
func (UnimplementedAnalyticsServiceServer) mustEmbedUnimplementedAnalyticsServiceServer() {}
func (UnimplementedAnalyticsServiceServer) testEmbeddedByValue()                          {}

// UnsafeAnalyticsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnalyticsServiceServer will
// result in compilation errors.
type UnsafeAnalyticsServiceServer interface {
	mustEmbedUnimplementedAnalyticsServiceServer()
}

func RegisterAnalyticsServiceServer(s grpc.ServiceRegistrar, srv AnalyticsServiceServer) {
	// If the following call pancis, it indicates UnimplementedAnalyticsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AnalyticsService_ServiceDesc, srv)
}

func _AnalyticsService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_CollectMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).CollectMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_CollectMetric_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).CollectMetric(ctx, req.(*CollectMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetMetrics(ctx, req.(*GetMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetMetricsHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricsHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetMetricsHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetMetricsHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetMetricsHistory(ctx, req.(*GetMetricsHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetStatistics(ctx, req.(*GetStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetSystemStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetSystemStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetSystemStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetSystemStats(ctx, req.(*GetSystemStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetUserStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetUserStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetUserStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetUserStats(ctx, req.(*GetUserStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetDashboardData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDashboardDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetDashboardData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetDashboardData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetDashboardData(ctx, req.(*GetDashboardDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_PredictLoad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PredictLoadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).PredictLoad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_PredictLoad_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).PredictLoad(ctx, req.(*PredictLoadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_PredictTrend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PredictTrendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).PredictTrend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_PredictTrend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).PredictTrend(ctx, req.(*PredictTrendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnalyticsService_ServiceDesc is the grpc.ServiceDesc for AnalyticsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnalyticsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "analytics.AnalyticsService",
	HandlerType: (*AnalyticsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _AnalyticsService_Health_Handler,
		},
		{
			MethodName: "CollectMetric",
			Handler:    _AnalyticsService_CollectMetric_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _AnalyticsService_GetMetrics_Handler,
		},
		{
			MethodName: "GetMetricsHistory",
			Handler:    _AnalyticsService_GetMetricsHistory_Handler,
		},
		{
			MethodName: "GetStatistics",
			Handler:    _AnalyticsService_GetStatistics_Handler,
		},
		{
			MethodName: "GetSystemStats",
			Handler:    _AnalyticsService_GetSystemStats_Handler,
		},
		{
			MethodName: "GetUserStats",
			Handler:    _AnalyticsService_GetUserStats_Handler,
		},
		{
			MethodName: "GetDashboardData",
			Handler:    _AnalyticsService_GetDashboardData_Handler,
		},
		{
			MethodName: "PredictLoad",
			Handler:    _AnalyticsService_PredictLoad_Handler,
		},
		{
			MethodName: "PredictTrend",
			Handler:    _AnalyticsService_PredictTrend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/analytics/analytics.proto",
}
